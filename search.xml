<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python：Matplotlib 绘制 3D曲面图</title>
    <url>/2020/Python%EF%BC%9AMatplotlib%20%E7%BB%98%E5%88%B6%203D%E6%9B%B2%E9%9D%A2%E5%9B%BE/</url>
    <content><![CDATA[<hr>
<p>Matplotlib 是 Python 的绘图库，它与 NumPy 一起使用，可以基本上实现 MATLAB 的绘图和计算功能，而且效率更高，速度更快。</p>
<p>今天主要说一下关于 Matplotlib 绘制三维图像，并实现一个可以多次使用的<strong>函数模板</strong>，直接复制调用即可使用。</p>
<hr>
<h2 id="1-导入模块包"><a href="#1-导入模块包" class="headerlink" title="1. 导入模块包"></a>1. 导入模块包</h2><p><code>numpy</code>和<code>matplotlib</code>是两个常规的基本模块。因为实现的是三维绘图，所以需要另外一个模块<code>Axes3D</code>，这是是 Matplotlib 里面专门用来画三维图的工具包。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br></pre></td></tr></table></figure>

<h2 id="2-图像的基本设置"><a href="#2-图像的基本设置" class="headerlink" title="2. 图像的基本设置"></a>2. 图像的基本设置</h2><p>这里包括对图中字体大小、图片长宽比、分辨率的调整，并将其转换为三维格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams.update(&#123;<span class="string">&#x27;font.size&#x27;</span>: <span class="number">32</span>&#125;)  <span class="comment"># 统一设置图中字体大小</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">16</span>), dpi=<span class="number">50</span>)  <span class="comment"># 设置图像大小和分辨率</span></span><br><span class="line">ax3 = Axes3D(fig)  <span class="comment"># 将图像转换为3D模式</span></span><br></pre></td></tr></table></figure>

<h2 id="3-处理数据，生成坐标矩阵"><a href="#3-处理数据，生成坐标矩阵" class="headerlink" title="3. 处理数据，生成坐标矩阵"></a>3. 处理数据，生成坐标矩阵</h2><p>这里的<code>matrix</code>是一个二维列表，是 Python 的基本数据格式，需要将其先转化为<code>np.array</code>的格式，才能进行更多的操作。<br>另外要根据传入的二维数据<strong>创建坐标矩阵</strong>，这一点很重要。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制三维图像</span></span><br><span class="line">matrix = np.array(matrix)</span><br><span class="line"><span class="comment"># 根据二维数据的长宽创建坐标矩阵</span></span><br><span class="line">arrX = np.arange(<span class="number">0</span>, <span class="built_in">len</span>(matrix[<span class="number">0</span>]))</span><br><span class="line">arrY = np.arange(<span class="number">0</span>, <span class="built_in">len</span>(matrix))</span><br><span class="line">X, Y = np.meshgrid(arrX, arrY)  <span class="comment"># 创建坐标矩阵</span></span><br><span class="line"><span class="built_in">print</span>(X.shape, Y.shape, matrix.shape)</span><br><span class="line">ax3.plot_surface(X, Y, matrix, cmap=<span class="string">&#x27;rainbow&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-设置坐标轴刻度，稀疏化坐标轴刻度"><a href="#4-设置坐标轴刻度，稀疏化坐标轴刻度" class="headerlink" title="4. 设置坐标轴刻度，稀疏化坐标轴刻度"></a>4. 设置坐标轴刻度，稀疏化坐标轴刻度</h2><p>如果我们的数据是100 X 100 的二维矩阵，如果将所有的刻度都显示在坐标轴上，那么必会变得密密麻麻，所以我们需要将坐标刻度稀疏化，并用自己想要的方式展现出来。<br>使用<code>xticks(x, _x)</code>设置X坐标轴刻度（Y轴同理，但是不能设置Z轴）：</p>
<ul>
<li>第一个参数：刻度值列表</li>
<li>第二个参数：需要展示的出来的经过处理的刻度值列表。这里可以对刻度自定义，比如统一扩大10倍或缩小十倍（本例中以0.1为步长取的数据，所以在刻度上要乘上步长，即缩小为0.1倍），同时也可以设置为字符串。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(arrX)))[::<span class="built_in">int</span>(<span class="built_in">len</span>(arrX) / <span class="number">10</span>)]</span><br><span class="line">_x = [<span class="built_in">int</span>(i * stepValue) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.xticks(x, _x)</span><br></pre></td></tr></table></figure>
<h2 id="5-设置图片名称并保存"><a href="#5-设置图片名称并保存" class="headerlink" title="5. 设置图片名称并保存"></a>5. 设置图片名称并保存</h2>使用<code>xlabel</code>设置X轴名称（Y轴同理，但是不能设置Z轴）：</li>
<li>第一个参数：X轴名称的字符串</li>
<li>第二个参数（<code>labelpad</code>）：X轴名称与X轴之间的间隔距离</li>
</ul>
<p>使用<code>savefig</code>储存图片，这里直接将需要储存的图片格式写在图片名称的字符串中即可。如果在 LaTeX中 使用推荐<code>.eps</code>格式，另外也可以储存为<code>.jpg</code>格式和<code>.png</code>格式.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.xlabel(keyX, labelpad=<span class="number">30</span>)  <span class="comment"># X轴名称</span></span><br><span class="line">plt.ylabel(keyY, labelpad=<span class="number">30</span>)  <span class="comment"># Y轴名称</span></span><br><span class="line">plt.title(<span class="string">&quot;The effect of &#123;&#125; and &#123;&#125; on GJBD&quot;</span>.<span class="built_in">format</span>(keyX, keyY), pad=<span class="number">20</span>)  <span class="comment"># 图形题目</span></span><br><span class="line">plt.savefig(<span class="string">&quot;./change_&#123;&#125;&#123;&#125;.eps&quot;</span>.<span class="built_in">format</span>(keyX, keyY))  <span class="comment"># 保存图片</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="完整代码接口如下"><a href="#完整代码接口如下" class="headerlink" title="完整代码接口如下"></a>完整代码接口如下</h2><p>三个参数如下：</p>
<ul>
<li>matrix : 二维列表格式的数据，形如[ [1,2,3], [4,5,6], [7,8,9] ]</li>
<li>keyX : X轴名称</li>
<li>keyY : Y轴名称</li>
</ul>
<p>其中<code>stepValue</code>是二维数据的采集步长，可以根据实际情况自行修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 使用二维列表数据绘制三维曲面图</span></span><br><span class="line"><span class="string">--- matrix : 二维数据（普通Python二维列表）</span></span><br><span class="line"><span class="string">--- keyX : X轴名称（string）</span></span><br><span class="line"><span class="string">--- keyY : Y轴名称（string）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">figure_3D</span>(<span class="params">matrix, keyX, keyY</span>):</span></span><br><span class="line">    plt.rcParams.update(&#123;<span class="string">&#x27;font.size&#x27;</span>: <span class="number">32</span>&#125;)  <span class="comment"># 统一设置图中字体大小</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">20</span>, <span class="number">16</span>), dpi=<span class="number">50</span>)  <span class="comment"># 设置图像大小和分辨率</span></span><br><span class="line">    ax3 = Axes3D(fig)  <span class="comment"># 将图像转换为3D模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制三维图像</span></span><br><span class="line">    matrix = np.array(matrix)</span><br><span class="line">    <span class="comment"># 根据二维数据的长宽创建坐标矩阵</span></span><br><span class="line">    arrX = np.arange(<span class="number">0</span>, <span class="built_in">len</span>(matrix[<span class="number">0</span>]))</span><br><span class="line">    arrY = np.arange(<span class="number">0</span>, <span class="built_in">len</span>(matrix))</span><br><span class="line">    X, Y = np.meshgrid(arrX, arrY)  <span class="comment"># 创建坐标矩阵</span></span><br><span class="line">    <span class="built_in">print</span>(X.shape, Y.shape, matrix.shape)</span><br><span class="line">    ax3.plot_surface(X, Y, matrix, cmap=<span class="string">&#x27;rainbow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标轴刻度</span></span><br><span class="line">	stepValue = <span class="number">0.1</span>    <span class="comment"># 步长</span></span><br><span class="line">    x = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(arrX)))[::<span class="built_in">int</span>(<span class="built_in">len</span>(arrX) / <span class="number">10</span>)]</span><br><span class="line">    _x = [<span class="built_in">int</span>(i * stepValue) <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">    plt.xticks(x, _x)</span><br><span class="line">    y = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(arrY)))[::<span class="built_in">int</span>(<span class="built_in">len</span>(arrY) / <span class="number">5</span>)]</span><br><span class="line">    _y = [<span class="built_in">round</span>(i * stepValue, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> y]</span><br><span class="line">    plt.yticks(y, _y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标轴名称</span></span><br><span class="line">    plt.xlabel(keyX, labelpad=<span class="number">30</span>)  <span class="comment"># X轴名称</span></span><br><span class="line">    plt.ylabel(keyY, labelpad=<span class="number">30</span>)  <span class="comment"># Y轴名称</span></span><br><span class="line">    plt.title(<span class="string">&quot;The effect of &#123;&#125; and &#123;&#125; &quot;</span>.<span class="built_in">format</span>(keyX, keyY), pad=<span class="number">20</span>)  <span class="comment"># 图形题目</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;./change_&#123;&#125;&#123;&#125;.eps&quot;</span>.<span class="built_in">format</span>(keyX, keyY))  <span class="comment"># 保存图片</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>后端技术栈：优秀的项目代码是怎么分层的</title>
    <url>/2021/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%EF%BC%9A%E4%BC%98%E7%A7%80%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%86%E5%B1%82%E7%9A%84/</url>
    <content><![CDATA[<hr>
<p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/e0a20a858a224a4f9adcf1e9654f7b09.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="程序人生"></p>
<hr>
<h1 id="阿里手册是怎么约定的"><a href="#阿里手册是怎么约定的" class="headerlink" title="阿里手册是怎么约定的"></a>阿里手册是怎么约定的</h1><p><a href="https://kangroo.gitee.io/ajcg/#/">阿里巴巴 Java 开发手册（https://kangroo.gitee.io/ajcg/#/）</a></p>
<ul>
<li><strong>开放接口层</strong>：可直接封装 Service 方法暴露成 RPC 接口；通过 Web 封装成 http 接口；进行网关安全控制、流量控制等。</li>
<li><strong>终端显示层</strong>：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。</li>
<li><strong>Web 层</strong>：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li><strong>Service 层</strong>：相对具体的业务逻辑服务层。</li>
<li><strong>Manager 层</strong>：通用业务处理层，它有如下特征：<br>对第三方平台封装的层，预处理返回结果及转化异常信息；<br>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；<br>与 DAO 层交互，对多个 DAO 的组合复用。</li>
<li><strong>DAO 层</strong>：数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li>
<li><strong>外部接口或第三方平台</strong>：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>
</ul>
<p>![应用分层](<a href="https://img-blog.csdnimg.cn/eb03d02956ea41ab91663b918afc00da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">https://img-blog.csdnimg.cn/eb03d02956ea41ab91663b918afc00da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</a> =600x500)</p>
<hr>
<h1 id="通常的项目结构"><a href="#通常的项目结构" class="headerlink" title="通常的项目结构"></a>通常的项目结构</h1><p>就以当下非常火热的 Spring Boot 典型项目结构为例，创建出来的项目应该总体分为三大层：<br>![Spring Boot 典型项目结构](<a href="https://img-blog.csdnimg.cn/4f2a14222b714d599edc359c0c7cae56.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">https://img-blog.csdnimg.cn/4f2a14222b714d599edc359c0c7cae56.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</a> =449x200)</p>
<ul>
<li>项目根目录<code>/src/main/java</code>：放置项目Java源代码</li>
<li>项目根目录<code>/src/main/resources</code>：放置项目静态资源和配置文件</li>
<li>项目根目录<code>/src/test/java</code>：放置项目测试用例代码</li>
</ul>
<p>而位于<code>/src/main/java</code>目录下的 Java 源代码的组织结构大家比较关心，这地方也只能给出一个通常典型的结构，毕竟不同项目和团队实践不一样，稍许有区别，但整体安排应该差不多。而且如果是多模块的项目的话，下面的结构应该只对应其中一个模块，其他模块的代码组织也大致差不多。</p>
<p>![Java 源代码的组织结构](<a href="https://img-blog.csdnimg.cn/763c23fa6a304f9494bd032f0604348f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">https://img-blog.csdnimg.cn/763c23fa6a304f9494bd032f0604348f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</a> =449x590)<br>各个目录详细介绍：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|_annotation：放置项目自定义注解</span><br><span class="line">|_aspect：放置切面代码</span><br><span class="line">|_config：放置配置类</span><br><span class="line">|_constant：放置常量、枚举等定义</span><br><span class="line">   |__constnt：存放常量定义</span><br><span class="line">   |__enums：存放枚举定义</span><br><span class="line">|_controller：放置控制器代码</span><br><span class="line">|_filter：放置一些过滤、拦截相关的代码</span><br><span class="line">|_mapper：放置数据访问层代码接口</span><br><span class="line">|_model：放置数据模型代码</span><br><span class="line">   |__entity：放置数据库实体对象定义</span><br><span class="line">   |__dto：存放数据传输对象定义</span><br><span class="line">   |__vo：存放显示层对象定义</span><br><span class="line">|_service：放置具体的业务逻辑代码（接口和实现分离）</span><br><span class="line">   |__intf：存放业务逻辑接口定义</span><br><span class="line">   |__impl：存放业务逻辑实际实现</span><br><span class="line">|_utils：放置工具类和辅助代码</span><br></pre></td></tr></table></figure>


<p>然后接下来<code>/src/main/resources</code>目录，里面主要存放静态配置文件和页面静态资源等东西：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">|_mapper：存放mybatis的XML映射文件（如果是mybatis项目）</span><br><span class="line">|_static：存放网页静态资源，比如下面的js/css/img</span><br><span class="line">   |__js：</span><br><span class="line">   |__css：</span><br><span class="line">   |__img：</span><br><span class="line">   |__font：</span><br><span class="line">   |__等等</span><br><span class="line">|_template：存放网页模板，比如thymeleaf/freemarker模板等</span><br><span class="line">   |__header</span><br><span class="line">   |__sidebar</span><br><span class="line">   |__bottom</span><br><span class="line">   |__XXX.html等等</span><br><span class="line">|_application.yml       基本配置文件</span><br><span class="line">|_application-dev.yml   开发环境配置文件</span><br><span class="line">|_application-test.yml  测试环境配置文件</span><br><span class="line">|_application-prod.yml  生产环境配置文件</span><br></pre></td></tr></table></figure>

<p>当然，这地方估计有一个很多人都会纠结的关于 DTO/VO/DO 等数据模型定义的区分。这在《阿里巴巴Java开发手册》中倒是做了一个所谓的严格区分，那本书上是这样去定义的：</p>
<ul>
<li><strong>DO（Data Object）</strong>：与数据库表结构一一对应，通过 DAO 层向上传输数据源对象。</li>
<li><strong>DTO（Data Transfer Object）</strong>：数据传输对象，Service 或 Manager 向外传输的对象。</li>
<li><strong>BO（Business Object）</strong>：业务对象。由Service层输出的封装业务逻辑的对象。</li>
<li><strong>AO（Application Object）</strong>：应用对象。在 Web 层与 Service 层之间抽象的复用对象模型，极为贴近展示层，复用度不高。</li>
<li><strong>VO（View Object）</strong>：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</li>
<li><strong>Query</strong>：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</li>
</ul>
<p>老实讲，看到这么多对象的定义，我也是很蒙的。实际项目开发时，我觉得没有必要刻意照搬去定义这么多层对象，这样后续做对象转换工作都能烦 skr 人。</p>
<p>出于简单起见，我个人觉得，只要保证业务逻辑层 Service 和数据库 DAO 层的操作对象严格划分出来，确保互相不渗透，不混用，问题应该就不大。比如在上面举例的这个项目的代码结构中，Service 层处理的对象都定义在了 DTO 包里，而 DAO 层处理的对象都放在了 Entity 包里了。</p>
<hr>
<h1 id="项目结构划分总结"><a href="#项目结构划分总结" class="headerlink" title="项目结构划分总结"></a>项目结构划分总结</h1><p>![总结](<a href="https://img-blog.csdnimg.cn/cb95460b2adb46bda039cff31108d8d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">https://img-blog.csdnimg.cn/cb95460b2adb46bda039cff31108d8d7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</a> =789x700)<br>对应代码目录的流转逻辑就是：</p>
<p>![代码逻辑](<a href="https://img-blog.csdnimg.cn/91064a9b92c6463b9294bb47fc014f7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center">https://img-blog.csdnimg.cn/91064a9b92c6463b9294bb47fc014f7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU29uZ1hKLS0=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center</a> =449x600)</p>
<hr>
<h1 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h1><ol>
<li>Contorller 层参数传递建议不要使用 HashMap，建议使用数据模型定义；</li>
<li>Controller 层里可以做参数校验、异常抛出等操作，但建议不要放太多业务逻辑，业务逻辑尽量放到 Service 层代码中去做；</li>
<li>Service 层做实际业务逻辑，可以按照功能模块做好定义和区分，相互可以调用；</li>
<li>功能模块 Service 之间引用时，建议不要渗透到 DAO 层（或者 mapper 层），基于 Service 层进行调用和复用比较合理；</li>
<li>业务逻辑层 Service 和数据库 DAO 层的操作对象不要混用。 Controller 层的数据对象不要直接渗透到 DAO 层（或者 mapper 层）；同理数据表实体对象 Entity 也不要直接传到 Controller 层进行输出或展示。</li>
</ol>
<hr>
<p>参考：</p>
<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247504977&idx=2&sn=477e70d58d7d8eaa526fa1cdc06a0f8a&chksm=fddd0295caaa8b8341d4f4b39ec60df44865d9251d6dd77f41dea6c2829d8e075a083ed21ebf&mpshare=1&scene=23&srcid=0831lx40ax2sxK3Qm789P4bj&sharer_sharetime=1630392151403&sharer_shareid=90de416a9fd907a1fb3174e6a5a27440#rd">CodeSheep的公众号</a></li>
<li><a href="https://kangroo.gitee.io/ajcg/#/">阿里巴巴Java开发手册</a></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>后端技术栈</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>项目架构</tag>
      </tags>
  </entry>
  <entry>
    <title>前端技术栈：Vue 双向绑定</title>
    <url>/2021/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%EF%BC%9AVue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<hr>
<h2 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h2><p>&emsp;&emsp;说到 Vue 的双向绑定首先联系到的就是 MVVM（Model-View-ViewModel）模式了，如下图所示，当视图发生改变的时候传递给 VM，再让数据得到更新，当数据发生改变的时候传给 VM，使得视图发生改变。</p>
<p>MVVM 模式是通过以下三个核心组件组成：</p>
<ul>
<li><strong>M：</strong> Model - 包含了业务和验证逻辑的数据模型；</li>
<li>   <strong>V：</strong> View - 定义屏幕中 View 的结构，布局和外观；</li>
<li>   <strong>VM：</strong> ViewModel - 扮演“View”和“Model”之间的使者，帮忙处理 View 的全部业务逻辑。</li>
</ul>
<p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210717223311920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70" alt="vue数据双向绑定原理"></p>
<hr>
<h2 id="Vue-数据双向绑定原理"><a href="#Vue-数据双向绑定原理" class="headerlink" title="Vue 数据双向绑定原理"></a>Vue 数据双向绑定原理</h2><p>&emsp;&emsp;Vue 数据双向绑定是通过<strong>数据劫持结合发布者-订阅者</strong>模式的方式来实现的，那么 Vue 是如果进行数据劫持的。我们可以先来看一下通过控制台输出一个定义在 Vue 初始化数据上的对象是个什么东西。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">obj</span>: &#123;</span><br><span class="line">            <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>输出：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210717224229988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70" alt="输出"><br>可以看到属性<code>a</code>有两个相对应的<code>get</code>和<code>set</code>方法，为什么会多出这两个方法呢？因为 Vue 是通过 <code>Object.defineProperty()</code> 来实现数据劫持的。</p>
<h3 id="通过一个“加《XXX》”的例子来理解"><a href="#通过一个“加《XXX》”的例子来理解" class="headerlink" title="通过一个“加《XXX》”的例子来理解"></a>通过一个“加《XXX》”的例子来理解</h3><p>&emsp;&emsp;在平常，很容易就可以打印出一个对象的属性数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;vue权威指南&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Book.name);  <span class="comment">// vue权威指南</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果想要在执行<code>console.log(book.name)</code>的同时，直接给书名加个书名号，那要怎么处理呢？或者说要通过什么监听对象 <code>Book</code> 的属性值。这时候<code>Object.defineProperty( )</code>就派上用场了，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Book, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    name = value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;书名叫做&#x27;</span> + value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;《&#x27;</span> + name + <span class="string">&#x27;》&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">Book.name = <span class="string">&#x27;vue权威指南&#x27;</span>;  <span class="comment">// 书名叫做vue权威指南</span></span><br><span class="line"><span class="built_in">console</span>.log(Book.name);  <span class="comment">// 《vue权威指南》</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;通过<code>Object.defineProperty( )</code>设置了对象 <code>Book</code> 的 <code>name</code> 属性，对其 <code>get</code> 和 <code>set</code> 进行重写操作，顾名思义，<code>get</code> 就是在读取 <code>name</code> 属性这个值触发的函数，<code>set</code> 就是在设置 <code>name</code> 属性这个值触发的函数，所以当执行 <code>Book.name = &#39;vue权威指南&#39;</code> 这个语句时，控制台会打印出 <code>&quot;书名叫做vue权威指南&quot;</code>，紧接着，当读取这个属性时，就会输出 <code>&quot;《vue权威指南》&quot;</code>，因为我们在 <code>get</code> 函数里面对该值做了加工。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>&emsp;&emsp;实现 <strong>MVVM</strong>主要包含两个方面，数据变化更新视图，视图变化更新数据：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210717225216190.png" alt="在这里插入图片描述"><br>&emsp;&emsp;关键点在于 data 如何更新 view，因为 view 更新 data 其实可以通过事件监听即可，比如 input 标签监听 input 事件就可以实现了。</p>
<p>&emsp;&emsp;数据更新视图的重点是如何知道数据变了，只要知道数据变了，那么接下去的事都好处理。如何知道数据变了，其实上文我们已经给出答案了，就是通过<code>Object.defineProperty( )</code>对属性设置一个 set 函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现 data 更新 view 了。<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210717225438862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70" alt="defineProperty"></p>
<hr>
<h2 id="实现双向绑定"><a href="#实现双向绑定" class="headerlink" title="实现双向绑定"></a>实现双向绑定</h2><p>&emsp;&emsp;首先要对数据进行劫持监听，所以我们需要设置一个<strong>监听器 Observer</strong>，用来监听所有属性。如果属性发生变化了，就需要告诉<strong>订阅者 Watcher</strong> 看是否需要更新。因为订阅者是有很多个，所以我们需要有一个<strong>消息订阅器 Dep</strong> 来专门收集这些订阅者，然后在监听器Observer 和 订阅者 Watcher 之间进行统一管理的。接着，还需要有一个<strong>指令解析器 Compile</strong>，对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者 Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者 Watcher 接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p>
<p><strong>双向绑定步骤：</strong></p>
<ol>
<li><p>实现一个<strong>监听器 Observer</strong>，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</p>
</li>
<li><p>实现一个<strong>订阅者 Watcher</strong>，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p>
</li>
<li><p>实现一个<strong>解析器 Compile</strong>，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
</li>
</ol>
<p><strong>流程图如下：</strong></p>
<p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20210717225804989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70" alt="双向绑定流程图"></p>
<hr>
<h2 id="实现最简单的双向绑定"><a href="#实现最简单的双向绑定" class="headerlink" title="实现最简单的双向绑定"></a>实现最简单的双向绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj  = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> demo = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#demo&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inp = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#inp&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;<span class="comment">// 当该属性被赋值的时候触发</span></span></span><br><span class="line"><span class="javascript">                inp.value = newVal;</span></span><br><span class="line"><span class="javascript">                demo.innerHTML = newVal;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        inp.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 给obj的name属性赋值，进而触发该属性的set方法</span></span></span><br><span class="line"><span class="javascript">            obj.name = e.target.value;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        obj.name = <span class="string">&#x27;fei&#x27;</span>;<span class="comment">// 在给obj设置name属性的时候，触发了set这个方法</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<hr>
<h2 id="Vue-代码实现"><a href="#Vue-代码实现" class="headerlink" title="Vue 代码实现"></a>Vue 代码实现</h2><h3 id="1-实现-observer"><a href="#1-实现-observer" class="headerlink" title="1. 实现 observer"></a>1. 实现 observer</h3><p>&emsp;&emsp;主要是给每个vue的属性用Object.defineProperty()，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">             <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//添加订阅者watcher到主题对象Dep</span></span><br><span class="line">                    <span class="keyword">if</span>(Dep.target) &#123;</span><br><span class="line">                        <span class="comment">// JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用</span></span><br><span class="line">                        dep.addSub(Dep.target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> val;</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(newVal === val) <span class="keyword">return</span>;</span><br><span class="line">                    val = newVal;</span><br><span class="line">                    <span class="built_in">console</span>.log(val);</span><br><span class="line">                    <span class="comment">// 作为发布者发出通知</span></span><br><span class="line">                    dep.notify();<span class="comment">//通知后dep会循环调用各自的update方法更新视图</span></span><br><span class="line">             &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">&#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj, vm</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                defineReactive(vm, key, obj[key]);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-实现-compile"><a href="#2-实现-compile" class="headerlink" title="2. 实现 compile"></a>2. 实现 compile</h3><p>&emsp;&emsp;compile 的目的就是解析各种指令称真正的 html。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$frag = <span class="built_in">this</span>.nodeToFragment(node, vm);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$frag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">    <span class="attr">nodeToFragment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">var</span> child;</span><br><span class="line">        <span class="keyword">while</span>(child = node.firstChild) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log([child])</span><br><span class="line">            self.compileElement(child, vm);</span><br><span class="line">            frag.append(child); <span class="comment">// 将所有子节点添加到fragment中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> frag;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">compileElement</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">        <span class="comment">//节点类型为元素(input元素这里)</span></span><br><span class="line">        <span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> attr = node.attributes;</span><br><span class="line">            <span class="comment">// 解析属性</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attr.length; i++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(attr[i].nodeName == <span class="string">&#x27;v-model&#x27;</span>) &#123;<span class="comment">//遍历属性节点找到v-model的属性</span></span><br><span class="line">                    <span class="keyword">var</span> name = attr[i].nodeValue; <span class="comment">// 获取v-model绑定的属性名</span></span><br><span class="line">                    node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 给相应的data属性赋值，进而触发该属性的set方法</span></span><br><span class="line">                        vm[name]= e.target.value;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">&#x27;value&#x27;</span>);<span class="comment">//创建新的watcher，会触发函数向对应属性的dep数组中添加订阅者，</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//节点类型为text</span></span><br><span class="line">        <span class="keyword">if</span>(node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(reg.test(node.nodeValue)) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = <span class="built_in">RegExp</span>.$1; <span class="comment">// 获取匹配到的字符串</span></span><br><span class="line">                name = name.trim();</span><br><span class="line">                <span class="keyword">new</span> Watcher(vm, node, name, <span class="string">&#x27;nodeValue&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-实现-watcher"><a href="#3-实现-watcher" class="headerlink" title="3. 实现 watcher"></a>3. 实现 watcher</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name, type</span>) </span>&#123;</span><br><span class="line">    Dep.target = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.node = node;</span><br><span class="line">    <span class="built_in">this</span>.vm = vm;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.update();</span><br><span class="line">    Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.get();</span><br><span class="line">        <span class="built_in">this</span>.node[<span class="built_in">this</span>.type] = <span class="built_in">this</span>.value; <span class="comment">// 订阅者执行相应操作</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取data的属性值</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.vm[<span class="built_in">this</span>.name]; <span class="comment">//触发相应属性的get</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4-实现Dep来为每个属性添加订阅者"><a href="#4-实现Dep来为每个属性添加订阅者" class="headerlink" title="4. 实现Dep来为每个属性添加订阅者"></a>4. 实现Dep来为每个属性添加订阅者</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    <span class="attr">addSub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        sub.update();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;首先，为每个 Vue 属性用 <code>Object.defineProperty()</code> 实现数据劫持，为每个属性分配一个订阅者集合的管理数组 dep；然后在编译的时候在该属性的数组 dep 中添加订阅者，<code>v-model</code> 会添加一个订阅者，<code>&#123;&#123;&#125;&#125;</code> 也会，<code>v-bind</code> 也会，只要用到该属性的指令理论上都会，接着为 input 会添加监听事件，修改值就会为该属性赋值，触发该属性的 set 方法，在 set 方法内通知订阅者数组 dep，订阅者数组循环调用各订阅者的 <code>update</code> 方法更新视图。</p>
<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>&emsp;&emsp;v-model 虽然很像使用了双向数据绑定的 Angular 的 ng-model，但是 Vue 是单项数据流，v-model 只是语法糖而已。</p>
<p>&emsp;&emsp;第一行的代码其实只是第二行的语法糖。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;sth&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;sth&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;sth = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>参考来源：</p>
<ol>
<li><a href="https://www.cnblogs.com/chenhuichao/p/10818396.html">https://www.cnblogs.com/chenhuichao/p/10818396.html</a></li>
<li><a href="https://www.jianshu.com/p/5fe2664ff5f7">https://www.jianshu.com/p/5fe2664ff5f7</a></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>前端技术栈</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统原理：C语言 threads多线程 实现单机聊天系统</title>
    <url>/2020/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%EF%BC%9AC%E8%AF%AD%E8%A8%80%20threads%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%8D%95%E6%9C%BA%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<hr>
<p>&emsp;&emsp;这个实验会建立一个全双工系统（Full-Duplex），实现两个管道同时收发消息。在程序中会涉及到3个文件，2个管道，2个进程，4个线程。线程之间的拓扑图如下：<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200424124332193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70" alt="通信示意图"><br>【完整代码附在文章最后】</p>
<hr>
<h2 id="创建连通管道"><a href="#创建连通管道" class="headerlink" title="创建连通管道"></a>创建连通管道</h2><p>&emsp;&emsp;首先创建<code>fifo_create.c</code>文件来事先创建2个管道，分别为A发送B接收、A接收B发送。使用<code>mkfifo()</code>语句创建管道，分别标识为“A2B”、“B2A”。<br>访问权限为<code>0644</code>，第一位0不算，从左至右三个数字分别代表<code>rw-</code> <code>r--</code> <code>r--</code>对应转化为的二进制<code>110</code> <code>100</code> <code>100</code>。十进制第1个数字代表<strong>文件所有者</strong>的权限，十进制第2个数字代表<strong>同组用户</strong>的权限，十进制第3个数字代表<strong>其他用户</strong>的权限。<br>之后验证<code>mkfifo()</code>的返回值，验证管道是否创建成功。如果创建成功，当前目录下回多出来“A2B”、“B2A”两个文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A2B = mkfifo(<span class="string">&quot;A2B&quot;</span>, <span class="number">0644</span>);</span><br><span class="line">	<span class="keyword">int</span> B2A = mkfifo(<span class="string">&quot;B2A&quot;</span>, <span class="number">0644</span>);</span><br><span class="line">	<span class="keyword">if</span> (A2B == <span class="number">-1</span>)	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Falled to create the FIFO of A2B!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (B2A == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Falled to create the FIFO of B2A!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<hr>
<h2 id="创建2个进程4个线程"><a href="#创建2个进程4个线程" class="headerlink" title="创建2个进程4个线程"></a>创建2个进程4个线程</h2><h3 id="连接标记符"><a href="#连接标记符" class="headerlink" title="连接标记符"></a>连接标记符</h3><p>&emsp;&emsp;创建<code>A.c</code>和<code>B.c</code>两个文件，在两个文件中均创建<code>send</code>和<code>receive</code>两个线程。因为两个文件类似，这里以<code>A.c</code>为例，<code>B.c</code>同理。<br>在<code>A.c</code>中首先定义一个全局变量，用来标记两个管道是否连接，如果均连接成功，则<code>flag=1</code>，有任意一个管道断开则<code>flag=0</code> 。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量，标记是否连接，两个管道中有一个断开，则flag变为0</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;	</span><br></pre></td></tr></table></figure>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>&emsp;&emsp;通过<code>send</code>函数实现发送消息。在管道连通之前，即在<code>open</code>语句等待管道连通。这里<code>open</code>语句使用只写的方式进行打开，如果管道连接成功，程序继续向下运行。<br>定义一个循环进行消息的多次发送，使用<code>fgets()</code>语句从指定的标准输入流<code>stdin</code>中读取一行，并把它存储在<code>buf</code>所指向的字符串内，多余的长度使用<code>\0</code>填充，而且<code>fgets()</code>语句包含换行符，所以在之后的<code>receive</code>函数中打印的时候不需要再添加换行符。<br>之后使用<code>write</code>语句将储存在<code>buf</code>中的全部字符串写入到刚才打开的<code>A2B</code>管道中。然后进行判断，如果刚才输入的是“88”则将标识符<code>flag</code>变成0，并打印下线提示，break出循环。如果输入的不是“88”，则在命令行打印<code>[A]:</code>，等待下一次输入。<br>最后关闭管道，退出线程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A给B发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">send</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Waiting...\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;A2B&quot;</span>, O_WRONLY);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Connected!\n===============================================\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">		fgets(buf, <span class="number">1023</span>, <span class="built_in">stdin</span>);</span><br><span class="line">		write(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;You have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><p>&emsp;&emsp;通过<code>receive</code>函数实现接收消息的功能。在管道连通之前，即<code>open</code>语句等待管道连通。这里<code>open</code>语句使用只读的方式进行打开，如果管道连接成功，程序继续向下运行。因为在本实验中两个通道一定是同时连接的，在<code>send</code>函数中已经打印连接成功的提示，所以在<code>receive</code>中就没有重复打印。<br>定义一个循环进行消息的多次接收，使用<code>read</code>语句将管道中的字符串全部储存在<code>buf</code>中，之后在末尾加上一个<code>\0</code>，表示字符串的结束。<br>然后进行判断，如果刚才接收到的是“88”则将标识符<code>flag</code>变成0，打印对方的最后一句话，同时打印对方已经下线的提示，break出循环。如果输入的不是“88”，则在命令行打印对方输入的内容后继续打印<code>[A]:</code>，等待下一次输入。<br>在打印接收到的对方消息时需要先在前面加上4个退格符，删除之前输入的<code>[A]:</code>这四个字符。另外要使用<code>fflush(stdout);</code>语句强制刷新标准输出缓冲区。<br>最后关闭管道，退出线程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A接收B发来的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">receive</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;B2A&quot;</span>, O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">		read(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="comment">//如果对方发“88”则断开连接，退出进程</span></span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[B]:%s&quot;</span>, buf);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Person B have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);	<span class="comment">//强制刷新输出缓冲区</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[B]:%s&quot;</span>, buf);<span class="comment">//删除之前输入的[X]:这四个字符</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);	<span class="comment">//强制刷新输出缓冲区</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双线程"><a href="#双线程" class="headerlink" title="双线程"></a>双线程</h3><p>&emsp;&emsp;在主函数中建立两个线程，并分别调用<code>send</code>和<code>receive</code>两个函数，并等待它们退出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid1, tid2;	<span class="comment">//线程ID</span></span><br><span class="line">	<span class="keyword">pthread_attr_t</span> attr;	<span class="comment">//线程属性</span></span><br><span class="line">	pthread_attr_init(&amp;attr); <span class="comment">//设置默认线程属性</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//执行两个线程分别进行收发</span></span><br><span class="line">	pthread_create(&amp;tid1, &amp;attr, send, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_create(&amp;tid2, &amp;attr, receive, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等待两个线程</span></span><br><span class="line">	pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<hr>
<h2 id="程序运行过程截图"><a href="#程序运行过程截图" class="headerlink" title="程序运行过程截图"></a>程序运行过程截图</h2><ol>
<li><p>等待连接<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200424131613716.png#pic_center" alt="等待连接"></p>
</li>
<li><p>管道连接成功<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200424131447920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="管道连接成功"></p>
</li>
<li><p>进行全工聊天<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200424131630580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="进行全工聊天"></p>
</li>
<li><p>聊天结束<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200424131654614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdYSl8wMQ==,size_16,color_FFFFFF,t_70#pic_center" alt="聊天结束"></p>
</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;本次实验结合了<strong>多线程</strong>和<strong>管道连接</strong>的知识，实现了一个简单的单机聊天功能。在本次实验中有以下几个需要注意的地方：</p>
<h3 id="fgets-的特点："><a href="#fgets-的特点：" class="headerlink" title="fgets() 的特点："></a>fgets() 的特点：</h3><ul>
<li><code>gets()</code>和<code>fgets()</code>都可以读取空格。</li>
<li><code>gets()</code>读取一行，不能设定读取容量，这一行有多少便读取多少，有可能会发生内存溢出。然而<code>fgets()</code>有三个参数，它是从 stream 流中读取 size 个字符存储到字符指针变量 s 所指向的内存空间。它的返回值是一个指针，指向字符串中第一个字符的地址。</li>
<li>在本实验中<code>fgets() </code>函数的读取大小均为1023，基本上满足了普通聊天的需要。<code>fgets()</code> 函数的size参数如果小于字符串的长度，那么字符串将会被截取；如果size大于字符串的长度则多余的部分系统会自动用 <code>\0</code> 填充。</li>
<li><code>fgets() </code>函数会读取换行符，所以在receive接收后，打印时不需要再添加换行符。</li>
</ul>
<h3 id="fflush-强制刷新缓冲区："><a href="#fflush-强制刷新缓冲区：" class="headerlink" title="fflush()强制刷新缓冲区："></a>fflush()强制刷新缓冲区：</h3><p>&emsp;&emsp;在本实验中使用<code>fflush()</code>和<code>stdout</code>、<code>stdin</code>结合，可以将标准输入输出流中的数据强制刷新在命令行中。特别是在打印完接收的数据后，再次打印<code>[A]:</code>等待输入的字符串时，如果不进行强制刷新，这个字符串不会立刻显示在命令行中，而是跟随下一次的输入或输出结果同时显示。</p>
<h3 id="“-b”退格："><a href="#“-b”退格：" class="headerlink" title="“\b”退格："></a>“\b”退格：</h3><p>&emsp;&emsp;因为每次打印完聊天消息后，都需要继续打印<code>[A]:</code> 等待输入，而如果未进行输入而是接收了对方的消息，那么<code>[A]:</code>这个字符串就多余了，需要使用4个<code>\b</code>删除。</p>
<hr>
<h2 id="实验的不足之处"><a href="#实验的不足之处" class="headerlink" title="实验的不足之处"></a>实验的不足之处</h2><ul>
<li>本实验在判断字符串是否为“88”时，使用的方法比较笨，同时比较两个字符完成的，其实可以使用<code>strcmp</code>函数直接对两个字符串进行比较。</li>
<li>本实验的最后还有一个小bug，就是在<code>A</code>输入“88”之后，两个程序不能立刻退出，而是需要在<code>B</code>上输入一个回车后才能退出，<code>B</code>对<code>A</code>发送消息情况同样。这个bug我试了很多方法都不能很好的解决，希望路过的大佬提供建议。</li>
</ul>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="fifo-create-c"><a href="#fifo-create-c" class="headerlink" title="fifo_create.c"></a>fifo_create.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A2B = mkfifo(<span class="string">&quot;A2B&quot;</span>, <span class="number">0644</span>);</span><br><span class="line">	<span class="keyword">int</span> B2A = mkfifo(<span class="string">&quot;B2A&quot;</span>, <span class="number">0644</span>);</span><br><span class="line">	<span class="keyword">if</span> (A2B == <span class="number">-1</span>)	</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Falled to create the FIFO of A2B!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (B2A == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Falled to create the FIFO of B2A!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="A-c"><a href="#A-c" class="headerlink" title="A.c"></a>A.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量，标记是否连接，两个管道中有一个断开，则flag变为0</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;	</span><br><span class="line"></span><br><span class="line"><span class="comment">//A给B发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">send</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Waiting...\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;A2B&quot;</span>, O_WRONLY);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Connected!\n===============================================\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">		fgets(buf, <span class="number">1023</span>, <span class="built_in">stdin</span>);</span><br><span class="line">		write(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;You have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A接收B发来的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">receive</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;B2A&quot;</span>, O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">		read(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="comment">//如果对方发“88”则断开连接，退出进程</span></span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[B]:%s&quot;</span>, buf);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Person B have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);	<span class="comment">//强制刷新输出缓冲区</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[B]:%s&quot;</span>, buf);<span class="comment">//删除之前输入的[X]:这四个字符</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[A]:&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);	<span class="comment">//强制刷新输出缓冲区</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid1, tid2;	<span class="comment">//线程ID</span></span><br><span class="line">	<span class="keyword">pthread_attr_t</span> attr;	<span class="comment">//线程属性</span></span><br><span class="line">	pthread_attr_init(&amp;attr); <span class="comment">//设置默认线程属性</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//执行两个线程分别进行收发</span></span><br><span class="line">	pthread_create(&amp;tid1, &amp;attr, send, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_create(&amp;tid2, &amp;attr, receive, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等待两个线程</span></span><br><span class="line">	pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="B-c"><a href="#B-c" class="headerlink" title="B.c"></a>B.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B给A发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">send</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Waiting...\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;B2A&quot;</span>, O_WRONLY);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Connected!\n===============================================\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;[B]:&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>)&#123;</span><br><span class="line">		fgets(buf, <span class="number">1023</span>, <span class="built_in">stdin</span>);		</span><br><span class="line">		write(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;You have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>) </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[B]:&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B接收A发来的消息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">receive</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> fd = open(<span class="string">&quot;A2B&quot;</span>, O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Open fifo error!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">		read(fd, buf, <span class="number">1023</span>);</span><br><span class="line">		<span class="keyword">if</span> (buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span> &amp;&amp; buf[<span class="number">0</span>] == <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[A]:%s&quot;</span>, buf);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Person A have been offline.\n&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">memset</span>(buf + <span class="number">1023</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\b\b\b\b[A]:%s&quot;</span>, buf);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;[B]:&quot;</span>);</span><br><span class="line">			fflush(<span class="built_in">stdout</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);	<span class="comment">//退出线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid1, tid2;	<span class="comment">//线程ID</span></span><br><span class="line">	<span class="keyword">pthread_attr_t</span> attr;	<span class="comment">//线程属性</span></span><br><span class="line">	pthread_attr_init(&amp;attr); <span class="comment">//设置默认线程属性</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//执行两个线程</span></span><br><span class="line">	pthread_create(&amp;tid1, &amp;attr, send, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_create(&amp;tid2, &amp;attr, receive, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等待两个线程</span></span><br><span class="line">	pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>操作系统原理</category>
      </categories>
      <tags>
        <tag>Pipe管道</tag>
        <tag>单机聊天系统</tag>
        <tag>C语言</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>程序人生：“写作”与“写代码”</title>
    <url>/2021/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F%EF%BC%9A%E2%80%9C%E5%86%99%E4%BD%9C%E2%80%9D%E4%B8%8E%E2%80%9C%E5%86%99%E4%BB%A3%E7%A0%81%E2%80%9D/</url>
    <content><![CDATA[<hr>
<p>&emsp;&emsp;前不久在网站中读到一篇文章，讲述的是写作与作曲的关系。对于大部分程序员来说，作曲似乎离我们比较遥远，可是写作却始终与我们的工作、生活紧密相连，比如在我们的工作中要编写各种文档、做项目计划，而在生活中，我们也可能会写自己的博客或是日记。</p>
<hr>
<h1 id="1-写作很像写代码"><a href="#1-写作很像写代码" class="headerlink" title="1. 写作很像写代码"></a>1. 写作很像写代码</h1><h2 id="（1）写作和写代码都要遵循一定的逻辑规则"><a href="#（1）写作和写代码都要遵循一定的逻辑规则" class="headerlink" title="（1）写作和写代码都要遵循一定的逻辑规则"></a>（1）写作和写代码都要遵循一定的逻辑规则</h2><p>&emsp;&emsp;写作和写代码一样，都要求我们去遵循一定的规则和规律，你需要懂得：</p>
<ul>
<li><strong>语法</strong>：我们都知道写代码时，需要遵循所使用的编程语言的语法。如果语法不对，那么代码根本无法编译。同样，在写作中，你需要遵循中文语法，包括正确的使用断句、标点、段落等，这些都是写作过程中的最近的要求。</li>
<li><strong>逻辑</strong>：没有逻辑的代码，会漏洞百出，甚至造成系统的严重缺陷。同样，文章的前后章节或所写的故事也需要遵循一定的逻辑，没有逻辑的文章会让人觉得不知所云，从而放弃继续阅读。</li>
<li><strong>装饰</strong>：文章需要通过一些表达方式（议论、抒情、描写等）或修辞手法（排比、比喻、对比、夸张等）来使文章更加生动有趣，没哟修饰的文章就像没有界面的软件，让人觉得枯燥、乏味，失去阅读的兴趣。</li>
</ul>
<p>&emsp;&emsp;上面所说的三点都是写作中的最基本的要求，如果你都能做到，那么它已经是一篇合格的文章了，如果能加上更吸引人的标题和内容，那么相信那将会是一篇精彩的文章。</p>
<h2 id="（2）都是将细节组合成更美的东西"><a href="#（2）都是将细节组合成更美的东西" class="headerlink" title="（2）都是将细节组合成更美的东西"></a>（2）都是将细节组合成更美的东西</h2><p>&emsp;&emsp;文章是由一个个段落组成的，而每一个段落又由很多词句组成。这很像一个软件由很多模块组成，每个模块又包含了很多代码段一样。它们都是将这些很微小的部分一点点组合起来变成一个完整的作品：一篇文章或一个软件应用。</p>
<h2 id="（3）你需要能够看到全局"><a href="#（3）你需要能够看到全局" class="headerlink" title="（3）你需要能够看到全局"></a>（3）你需要能够看到全局</h2><p>&emsp;&emsp;软件开发中有架构师的角色，他会负责整个应用的架构，确定模块间的调用关系，以保证整个应用都能协调高效地工作。同样，在写一篇文章时，你就成了这篇文章的架构师，你需要对文章的段落构成和每个章节进行合理的规划，使整个文章既有清晰的层次，又能突出重点并且完整地表达你的主题。</p>
<h2 id="（4）自我表达非常关键"><a href="#（4）自我表达非常关键" class="headerlink" title="（4）自我表达非常关键"></a>（4）自我表达非常关键</h2><p>&emsp;&emsp;写作和写代码都需要创造力以及自我表达能力，它们不是与生俱来的，需要你通过不断地练习（写作和写代码），逐渐地去掌握它，并最终创造出属于你自己的风格和表现形式。</p>
<h2 id="（5）考虑你的读者或用户"><a href="#（5）考虑你的读者或用户" class="headerlink" title="（5）考虑你的读者或用户"></a>（5）考虑你的读者或用户</h2><p>&emsp;&emsp;现在的应用变得越来越重视用户了，从 UI（用户界面）设计到 UX（用户体验）设计再到情感设计，软件设计师们越来越重视用户的使用感受。同样，你在写一篇文章时也需要能够站在读者的角度去审视你的文章，并通过一些方法，比如，强调某一个你希望引起读者管制的段落，来引导你的读者更好地阅读和理解你的文章，并且从中获得更好的阅读体验。</p>
<h2 id="（6）每个人都可以写作和学会写代码"><a href="#（6）每个人都可以写作和学会写代码" class="headerlink" title="（6）每个人都可以写作和学会写代码"></a>（6）每个人都可以写作和学会写代码</h2><p>&emsp;&emsp;我还没有看过一本介绍如何写作的书籍，我既不懂得太多的修辞手法，文笔也不老道，但这些都不会成为我写作的障碍。我所做的只是将我所想的用最简单的语言表达出来，然后通过反复的修改，让它们读起来通顺，仅此而已。同样，你也不需要任何准备就可以开始学习写代码，就像在“技匠”的公众号中的一篇文章中提到，只用5分钟就学会了如何写一个能够识别橙子🍊和苹果🍎的人工智能程序一样，你也可以通过自学编程来学会写代码。</p>
<hr>
<h1 id="2-写作和写代码又是不一样的"><a href="#2-写作和写代码又是不一样的" class="headerlink" title="2. 写作和写代码又是不一样的"></a>2. 写作和写代码又是不一样的</h1><h2 id="（1）写作和写代码的目的不同"><a href="#（1）写作和写代码的目的不同" class="headerlink" title="（1）写作和写代码的目的不同"></a>（1）写作和写代码的目的不同</h2><p>&emsp;&emsp;我们写代码的目的都是相似的，那就是去解决某一个或者一类问题。写作的目的则宽泛得多，它可以用来叙事，用来说明，用来议论，用来描写，更可以用来抒情。相对写代码而言，写作的目的是如此丰富，这也正是它吸引我的原因。</p>
<h2 id="（2）写作能够表达感情，而写代码不能"><a href="#（2）写作能够表达感情，而写代码不能" class="headerlink" title="（2）写作能够表达感情，而写代码不能"></a>（2）写作能够表达感情，而写代码不能</h2><p>&emsp;&emsp;我看过很多别人写的代码，可我从来没有从中感受到喜悦、悲伤、激动、以及爱情，我从这一行行代码中完全体会不到情感。但我却能从他人的文章中感受到这些。我喜欢那些富有情感的文章，并且真心喜欢那些文章的作者。或许，能够给文章赋予情感才是写作与写代码的最大区别，也应该是最重要的区别吧！</p>
<p>&emsp;&emsp;我的写作之旅还在继续，我会坚持用那些最简单的文字去表达自己。同样，如果你是一名程序员，那么我也非常鼓励你能够开始写作，因为你会发现写作会给你带来很多好处，而这其中也包括编程能力的提升。</p>
<hr>
<blockquote>
<p>读《程序员的自我修养》（陈逸鹤）有感，感触至深之处，摘录于此，若有不当之处，联系博主即可删文。</p>
</blockquote>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>程序人生：如何成为一名优秀的全栈工程师</title>
    <url>/2021/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F%EF%BC%9A%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E5%90%8D%E4%BC%98%E7%A7%80%E7%9A%84%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88/</url>
    <content><![CDATA[<hr>
<blockquote>
<ul>
<li>对性能影响有着深入理解的技术通才</li>
<li>掌握多种技能，并能利用多种技能独立完成产品的人</li>
<li>一位资深开发工程师、架构师，以及具有敏捷开发技能的程序员</li>
</ul>
</blockquote>
<hr>
<h1 id="1-什么是全栈工程师"><a href="#1-什么是全栈工程师" class="headerlink" title="1. 什么是全栈工程师"></a>1. 什么是全栈工程师</h1><p>&emsp;&emsp;“全栈工程师” 一词，最早出现于 Facebook 工程师 Calos Bueno 的一篇文章 —— Full Stack。他把全栈工程师定义为<strong>对性能影响有着深入理解的技术通才</strong>。在 “拉钩”  “100Offer” 等针对互联网人才的招聘网站上，全栈工程师更是一跃成为热门招聘职位，其薪酬水平也比一般的开发工程师职位要高出一截。那么，什么是全栈工程师，我们又应该如何定义一名全栈工程师呢？</p>
<p>&emsp;&emsp;百度百科对全栈工程师的定义是这样的：<strong>“掌握多种技能，并能利用多种技能独立完成产品的人。”</strong> 我觉得这个定义还不够全面，我认为全栈工程师应该同时是<strong>一位资深开发工程师、架构师，以及具有敏捷开发技能的程序员</strong>。全栈工程师对于软件开发的认识往往已经进化了，他们把特定的技术抛到了身后，明白技术的更新始终比计算机理论要快的道理，因此，他们注重强化自身的核心技能，关注并乐于实践其他技术。全栈工程师往往是某一方面的专家，同时通晓并善于在正确的场合运用其他语言、工具和技术。</p>
<hr>
<h1 id="2-全栈工程师的价值"><a href="#2-全栈工程师的价值" class="headerlink" title="2. 全栈工程师的价值"></a>2. 全栈工程师的价值</h1><p>&emsp;&emsp;随着时间的推移，全栈工程师的作用和价值在越来越多的产品或项目中得到了印证。那么，我们来看看全栈工程师对于个人或公司意味着什么。</p>
<ul>
<li><strong>个人价值及自由度的极大提升</strong> —— 我曾看过一些介绍全栈工程师的文章，文中大多强调了全栈工程师对于公司与团队的价值。而当你成为一名真正的全栈工程师后，会感受到前所未有的个人价值与技术自由度的提升。试想当一个很好的创意出现时，你可以一个人或主导一个团队去实现并不断完善它，这是一件多么让人兴奋的事情啊！</li>
<li><strong>全局思维与技术前瞻性</strong> —— 由于具备了各个开发环节与技术领域的知识，全栈工程师往往具有更好的<strong>大局观</strong>和<strong>技术前瞻性</strong>，能够在项目初期就选择正确的技术，并很好地把控一个项目的整体方向。现代项目往往非常复杂，而全栈工程师往往能带来技术和质量上的保障，从而成为个项目成功的关键人物。</li>
<li><strong>降低沟通成本</strong> —— 我经常听到有设计师抱怨前端工程师无法百分之百地还原他们的设计，而前端工程师又在抱怨后端工程师从接口返回的数据根本无法直接使用，后端工程师也在抱怨产品经理所提的需求根本无法完成。随着团队人数的上升，由于各自技能栈的不同，沟通成本必然会随之上升。全栈工程师除了能够独立完成前后端的开发（甚至包括设计）外，如果能够在项目初期提前介入，便能很好地规避技术风险，过滤不合理的需求，从而显著降低因不同技术差异导致的沟通问题，显著降低项目风险。.</li>
<li><strong>初创公司</strong> —— 我们已经来到了一个大众创业，万众创新的时代。那些初创公司也如雨后春笋般不断涌现。初创公司往往都有了一个不错的创意，但经常会遇到 “就缺一名程序员” 的尴尬。我想说的是，他们其实并不是缺程序员，而是缺一名全栈工程师。初创公司往往资金有限，而一名优秀的全栈工程师能够帮助初创公司用最低的代价与最短的时间推出自己的产品。这是初创公司能够存活下来，拿到更多投资，甚至成为 “独角兽” 一员的最关键一步。</li>
</ul>
<hr>
<h1 id="3-全栈工程师的技能栈"><a href="#3-全栈工程师的技能栈" class="headerlink" title="3. 全栈工程师的技能栈"></a>3. 全栈工程师的技能栈</h1><p>&emsp;&emsp;看到这里你一定会问，到底需要具备怎样的技能才能成为一名全栈工程呢？下面这张表格来自 Medium，作者将软件开发所涉及的各个方面分为层，又将每个层所包含的主要技术作为组件，制作了这张全栈技术图。</p>
<table>
<thead>
<tr>
<th align="left">LAYER（层次）</th>
<th align="left">COMPONENTS（组件）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Hardware 硬件</td>
<td align="left">Server Hardware、RAID、Network Protocol、Block devices</td>
</tr>
<tr>
<td align="left">OS 操作系统</td>
<td align="left">Linux、Mac OS、Windows Server、CoreOS</td>
</tr>
<tr>
<td align="left">Virtualization 虚拟化</td>
<td align="left">Xen、VMware、KVM、VirtualBox</td>
</tr>
<tr>
<td align="left">Hosting 虚拟主机（云主机）</td>
<td align="left">Azure（微软）、AWS（亚马逊）、Linode、Rackspace cloud</td>
</tr>
<tr>
<td align="left">Containers / PaaS 容器</td>
<td align="left">Docker、Google APPengine、Heroku</td>
</tr>
<tr>
<td align="left">Scaling 扩展</td>
<td align="left">Load balancing 负载均衡、Partitioning 分区、CDNs 内容分发网络</td>
</tr>
<tr>
<td align="left">Package management 依赖包管理</td>
<td align="left">apt、rpm、brew</td>
</tr>
<tr>
<td align="left">Server management 服务管理</td>
<td align="left">Bash、GCC、Make</td>
</tr>
<tr>
<td align="left">Web servers 网络服务器</td>
<td align="left">Apache、Nginx</td>
</tr>
<tr>
<td align="left">Databases 数据库</td>
<td align="left">MySQL、SQL Server、MongoDB、Redis</td>
</tr>
<tr>
<td align="left">Search 搜索</td>
<td align="left">Elasticsearch 搜索引擎 、SOLR、Facets</td>
</tr>
<tr>
<td align="left">Config management 配置管理</td>
<td align="left">Puppet、Composer、Chef、Kubernetes</td>
</tr>
<tr>
<td align="left">Programming 编程</td>
<td align="left">PHP、Java、Swift、Go、Ruby、Python、JavaScript</td>
</tr>
<tr>
<td align="left">Frameworks 框架</td>
<td align="left">WordPress、Flask、Django、AngularJS、Vue</td>
</tr>
<tr>
<td align="left">Frontend Dev 前端开发</td>
<td align="left">HTML5、CSS、LASS</td>
</tr>
<tr>
<td align="left">Security  安全</td>
<td align="left">XSS、SQL Injection、SSL</td>
</tr>
<tr>
<td align="left">Frontend Design 前端设计</td>
<td align="left">UI、UX、Photoshop、Illustrator</td>
</tr>
<tr>
<td align="left">Business requirement 商业需求</td>
<td align="left">用户需求收集、项目管理</td>
</tr>
</tbody></table>
<p>&emsp;&emsp;从上面这张表我们不难发现，现在的技术体系是多么庞大，每一年又会有新的技术加入到这些层中，而已有的技术又在不断地更新。因此，要掌握所有技术是根本不可能的，而成为全栈工程师也并不需要你真得掌握所有的技术，你应该将自己的精力聚焦在关键开发技能，以及一些必须掌握的附加技能上。</p>
<p>&emsp;&emsp;有经验的技术领导者在招聘时，往往会同时考察应聘者的技术能力与上述附加技能，而对于初级程序员的招聘来说，那些附加技能往往更被优秀的技术公司所看重。开发技能是你的硬实力，而附加技能则可以看作是你的软实力，只有同时具备这两方面技能，才能成为一名优秀的全栈工程师。</p>
<hr>
<h1 id="4-优秀的全栈工程师需要走出去"><a href="#4-优秀的全栈工程师需要走出去" class="headerlink" title="4. 优秀的全栈工程师需要走出去"></a>4. 优秀的全栈工程师需要走出去</h1><p>&emsp;&emsp;优秀的全栈工程师不应局限于自己的工作，他更应该走出去，接触不同的技术，分享自己的经验和心得，认识更多的朋友。</p>
<ul>
<li><strong>参加技术大会</strong> —— InfoQ、CSDN、GITC、优设、TED 等网站都会定期举办各类技术大会。在这些大会上，你不仅能够听到技术大咖们带来的各自领域最佳技术实践，而且能认识很多行业内的朋友。这对你开拓思路，扩大技术社交圈都很有帮助。因此，如果公司没有安排你去参加这些技术大会的话，那就自己买票参加，作为对自己的一种投资吧。</li>
<li><strong>做公开演讲</strong> —— 全栈工程师作为团队的核心成员，他一定需要在团队内部做技术、管理等方面的演讲。如果你是一个乐于分享的技术达人，那么也可以尝试录制个人课程（视频或音频），并在慕课、网易课堂、优酷，或荔枝、喜马拉雅等各种媒体上分享自己的技能和知识。不要因为自己并不是专家就不愿尝试，相信我，你用心制作的内容，会获得大家认可的，并收获一大批粉丝的。</li>
<li><strong>个人博客</strong> —— 每天进步一点点，一年以后你便会获得质的飞跃。优秀的全栈工程师懂得如何进行知识的积累，而技术博客就是一个很好的方式，将自己平时的实践、思考记录下来，配以 tag 标签方便日后的回顾。最有意思的是，当你在不断记录和更新你的博客同时，来自不同地方的程序员也会通过你的博客认识你。</li>
<li><strong>参加线下活动</strong> —— 与以前的程序员总是宅在家里不同，现在的年轻程序员们更愿意分享和交流。很多网站也会组织不同技术主题的线下活动，在这些活动中你可以听到一些技术牛人的分享，还可以找到很多和你一样对技术富有激情的人。</li>
</ul>
<p>&emsp;&emsp;全栈工程师绝不是一夜铸成的，你需要打好技术基础，强化核心技能，并持续学习。相信有一天你也能感受到自由地运用技术，开发出优秀产品所带来的乐趣。</p>
<hr>
<blockquote>
<p>读《程序员的自我修养》（陈逸鹤）有感，感触至深之处，摘录于此，若有不当之处，联系博主即可删文。</p>
</blockquote>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>算法分析与设计：7大排序算法大汇总（C++）</title>
    <url>/2021/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%9A7%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%88C++%EF%BC%89/</url>
    <content><![CDATA[<hr>
<ul>
<li><a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306?fr=aladdin">冒泡排序</a>（Bubble Sort）</li>
<li><a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序</a>（Selection Sort）</li>
<li><a href="https://baike.baidu.com/item/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a>（Insertion Sort）</li>
<li><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95?fromtitle=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&fromid=2084344">快速排序</a>（Quick Sort）</li>
<li><a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序</a>（Merge Sort）</li>
<li><a href="https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">希尔排序</a>（Shell Sort）</li>
<li><a href="https://baike.baidu.com/item/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F">计数排序</a>（Counting Sort）</li>
</ul>
<p>【上述超链接均为相应的百度百科】</p>
<hr>
<h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++  实现代码"></a>C++  实现代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArr</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *(arr + i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 冒泡排序（Bubble Sort）</span></span><br><span class="line"><span class="comment">        它重复地走访过要排序的元素，依次比较相邻两个元素，如果它们的顺序错误就把他们</span></span><br><span class="line"><span class="comment">    调换过来，直到没有元素再需要交换，排序完成。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j])</span><br><span class="line">            &#123;</span><br><span class="line">                temp = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 选择排序（Selection Sort）</span></span><br><span class="line"><span class="comment">       第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，</span></span><br><span class="line"><span class="comment">    然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[minIndex]) <span class="comment">//找到最小的数</span></span><br><span class="line">                minIndex = j;               <span class="comment">//将最小数的索引保存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = array[minIndex];</span><br><span class="line">        array[minIndex] = array[i];</span><br><span class="line">        array[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 插入排序（Insertion Sort）</span></span><br><span class="line"><span class="comment">       将一个记录插入到已经排好序的有序表中。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> current = array[i + <span class="number">1</span>]; <span class="comment">// 待归位的数</span></span><br><span class="line">        <span class="keyword">int</span> preIndex = i;           <span class="comment">// 待归位的前面的一个数</span></span><br><span class="line">        <span class="comment">// 利用逐个比较的方式将待归位的数归位。</span></span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; array[preIndex])</span><br><span class="line">        &#123;</span><br><span class="line">            array[preIndex + <span class="number">1</span>] = array[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[preIndex + <span class="number">1</span>] = current; <span class="comment">// 找到了正确的位置，进行归位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 快速排序（Quick Sort）</span></span><br><span class="line"><span class="comment">       将待排数组分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则</span></span><br><span class="line"><span class="comment">    可分别对这两部分记录继续进行排序，以达到整个序列有序。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="comment">// 快速排序核心算法——Partition：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = start, j = end + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 将start暂存在x里面，顺便作为基准元素</span></span><br><span class="line">    <span class="keyword">int</span> x = array[start];</span><br><span class="line">    <span class="comment">// 将小于x的元素交换到左边区域，将大于x的元素交换到右边区域</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (array[++i] &lt; x &amp;&amp; i &lt; end)</span><br><span class="line">            ; <span class="comment">// 找到小于基准元素的第一个数</span></span><br><span class="line">        <span class="keyword">while</span> (array[--j] &gt; x)</span><br><span class="line">            ; <span class="comment">// 找到大于基准元素的第一个数</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 小于基准元素的第一个数在大于基准元素的第一个数的右边，说明划分完毕</span></span><br><span class="line">        <span class="built_in">swap</span>(array[i], array[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    array[start] = array[j]; <span class="comment">// 将中间位置的元素放在第一个</span></span><br><span class="line">    array[j] = x;            <span class="comment">// 将刚才暂存在x中的start（基准元素放在中间）</span></span><br><span class="line">    <span class="keyword">return</span> j;                <span class="comment">// 返回中间位置索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = <span class="built_in">Partition</span>(array, start, end);</span><br><span class="line">    <span class="keyword">if</span> (q &gt; start)</span><br><span class="line">        <span class="built_in">QuickSort</span>(array, start, q - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (q &lt; end)</span><br><span class="line">        <span class="built_in">QuickSort</span>(array, q + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 归并排序（Merge Sort）</span></span><br><span class="line"><span class="comment">       就是把数组分成更小的数组,合并的时候再排序</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = array;</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="comment">// 每次循环的规模（seg）翻倍</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> seg = <span class="number">1</span>; seg &lt; len; seg += seg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; len; start += seg + seg)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> low = start, mid = <span class="built_in">min</span>(start + seg, len), high = <span class="built_in">min</span>(start + seg + seg, len);</span><br><span class="line">            <span class="keyword">int</span> k = low;</span><br><span class="line">            <span class="keyword">int</span> start1 = low, end1 = mid;</span><br><span class="line">            <span class="keyword">int</span> start2 = mid, end2 = high;</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2) <span class="comment">// 合并两个数组</span></span><br><span class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class="line">            <span class="keyword">while</span> (start1 &lt; end1) <span class="comment">// 数组2已经合并完了，开始合并剩余的数组1</span></span><br><span class="line">                b[k++] = a[start1++];</span><br><span class="line">            <span class="keyword">while</span> (start2 &lt; end2) <span class="comment">// 数组1已经合并完了，开始合并剩余的数组2</span></span><br><span class="line">                b[k++] = a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> *temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a != array)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            b[i] = a[i];</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 递归框架</span></span><br><span class="line"><span class="comment">// int tmpArray[];</span></span><br><span class="line"><span class="comment">// void MergeSort(int array[], int left, int right)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     if (left &lt; right) // 至少两个元素</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         int i = (left + right) / 2; // 取中点</span></span><br><span class="line"><span class="comment">//         MergeSort(array, left, i);</span></span><br><span class="line"><span class="comment">//         MergeSort(array, i + 1, right);</span></span><br><span class="line"><span class="comment">//         Merge(array, tmpArray, left, i, right); // 合并到数组tmpArray</span></span><br><span class="line"><span class="comment">//         Copy(array, tmpArray, left, right);     // 将tmpArray中的数据复制回array</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 希尔排序（Shell Sort）</span></span><br><span class="line"><span class="comment">       是插入排序的一种又称“缩小增量排序”。比较相隔较远距离（称为增量）的数，使得数</span></span><br><span class="line"><span class="comment">    移动时能跨过多个元素，则进行一次比较就可能消除多个元素交换。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; len / <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; array[j] &lt; array[j - h]; j -= h)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(array[j], array[j - h]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 计数排序（Counting Sort）</span></span><br><span class="line"><span class="comment">       是对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数。</span></span><br><span class="line"><span class="comment">********************************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">CountingSort</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">-10000</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">            max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> *count_arr = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line">    <span class="keyword">int</span> *sorted_arr = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">        count_arr[k] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        count_arr[array[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">        count_arr[k] += count_arr[k - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = len; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">        sorted_arr[--count_arr[array[j - <span class="number">1</span>]]] = array[j - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> sorted_arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// C++的数组是地址传递，所以要复制多组原始乱序数组</span></span><br><span class="line">    <span class="keyword">int</span> arr1[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr2[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr3[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr4[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr5[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr6[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> arr7[<span class="number">13</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(arr1) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Bubble Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">BubbleSort</span>(arr1, len);</span><br><span class="line">    <span class="built_in">printArr</span>(arr1, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Select Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">SelectionSort</span>(arr2, len);</span><br><span class="line">    <span class="built_in">printArr</span>(arr2, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Insertion Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">InsertionSort</span>(arr3, len);</span><br><span class="line">    <span class="built_in">printArr</span>(arr3, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Quick Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">QuickSort</span>(arr4, <span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">printArr</span>(arr4, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Merge Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">MergeSort</span>(arr5, len);</span><br><span class="line">    <span class="built_in">printArr</span>(arr5, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Shell Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">ShellSort</span>(arr6, len);</span><br><span class="line">    <span class="built_in">printArr</span>(arr6, len);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Counting Sort:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int</span> *sortArr;</span><br><span class="line">    sortArr = <span class="built_in">CountingSort</span>(arr7, len);</span><br><span class="line">    <span class="built_in">printArr</span>(sortArr, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>算法分析与设计</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>程序人生：我为什么要编程？</title>
    <url>/2021/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F%EF%BC%9A%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%BC%96%E7%A8%8B%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p><em>我似乎又一次理解了编程的意义，但我明白未来的某一天，我一定还会问自己同样的问题 —— 为什么要编程，希望到那个时候自己还能是那个热爱编程，有着一颗匠心的“技匠”……</em></p>
</blockquote>
<hr>
<p>&emsp;&emsp;编程的意义是什么，我又为什么要编程呢？这是一个时不时会浮现在我脑海中的问题，它来得并不频繁，但每次都伴随着我对自己职业生涯或人生自标的质疑而产生，令我感到些许困惑和不安。在这十几年的职业生涯中，我也似乎总能在每个阶段为自己找到一个继续热爱编程的理由，直到它已无法解笞疑惑的再一次产生。就这样一次又一次的循环在复，我似乎渐渐埋解了编程的意义……</p>
<hr>
<h1 id="1-编程是一项技能"><a href="#1-编程是一项技能" class="headerlink" title="1. 编程是一项技能"></a>1. 编程是一项技能</h1><p>&emsp;&emsp;回想大学毕业刚成为一名程序员时，自己对技术是如此狂热，我不断地购买各类技术书籍，几乎所有的业余时间也都用来钻研技术，提高目己的编程能力。我也因此很快成了同一批入职新人中，编码效率和质量最突出的一个。而在那段时间里所做的技术积累，也成了我日后工作的坚实基础，编程作为一项技能已经深深地嵌入到了我的身体里。</p>
<p>&emsp;&emsp;即使到了今天，我仍非常怀念那段心无旁骛，一心钻研技术的日子。我为能在工作中写出的每一行优秀代码而兴奋，更为每一天能在技术上取得的点滴进步而喜悦，一切都是那么单纯，编程的意义对于那时的我来说就在于技术本身。</p>
<hr>
<h1 id="2-编程是去解决问题"><a href="#2-编程是去解决问题" class="headerlink" title="2. 编程是去解决问题"></a>2. 编程是去解决问题</h1><p>&emsp;&emsp;“能力越大，责任也也大”，电影《蜘蛛侠》中的这句经典台词同样适用于程序员的职业生涯。随着技术能力的提升及在工作中逐渐获得的认可，我的职位也由原来的初级程序员变为了资深开发工程师，以及后来的架构师。相应的，除了编程之外，我工作中的很大一部分时间需要用来与用户进行沟通，并分析他们提出的需求。对于我来说，这个角色转换的过程是艰难甚至有些痛苦的。我不得不用自己最薄弱的沟通技能去和用户打交道，更要命的是我所习惯使用的那些技术语言有时很难让他们理解。</p>
<p>&emsp;&emsp;我很快意识到自己已不再是那个只需被动接受任务安排，并将自己的编程工作完成好就万事大吉的程序员。除了技术之外，我更需要能够突破程序员思维，去发现用户需求背后所隐含的真正问题。我比以前变得更加务实，不再刻意追求技术的高深，足尽可能从问题本身出发，选择最有效的技术手段去解决它。</p>
<p>&emsp;&emsp;此时，编程的意义也发生了改变，它已不再局限于技术本身，而成了解决问题的理想工具。</p>
<hr>
<h1 id="3-编程是在表达，也是在创作"><a href="#3-编程是在表达，也是在创作" class="headerlink" title="3. 编程是在表达，也是在创作"></a>3. 编程是在表达，也是在创作</h1><p>&emsp;&emsp;就这样又过了几年，当 “为什么要编程?” 这个问题再次摆在我的面前时，自己也已过了而立之年。对于大多数中国程序员来说，这个年纪已经算是高龄，甚至还有很多人会认为30岁还在编程，一定是混得不够好吧。当然，对于这些质疑我也总是一笑了之。其实，在此之前我也有过很多转型的机会，比如，去业务部门，或是转为管理，等等。但最终我还是选择留在了技术岗位上，因为我觉得编程仍是我最喜欢的，或许也是我唯一擅长的吧。</p>
<p>&emsp;&emsp;而这个时期也成了我整个程序员生涯的黄金期，我写了公司的核心框架，以及一些重要业务系统的核心算法。我很享受这段时光，因为我已几乎感受不到那些技术上的牵绊，我更像雕刻师使用手中的刻刀一般，自如地运用编程来实现那些我认为优秀的东西。</p>
<p>&emsp;&emsp;编程对于我来说已不再是一项技能或是工具，我是在通过编程进行着自我表达与创作，这种感受带给了我极大的自由度，而我也从中感受到了前所未有的喜悦与乐趣。</p>
<hr>
<h1 id="4-编程是为了留下痕迹"><a href="#4-编程是为了留下痕迹" class="headerlink" title="4. 编程是为了留下痕迹"></a>4. 编程是为了留下痕迹</h1><p>&emsp;&emsp;最终我还是走上了管理岗位，这里面存在很多个人很难左右的因素（包括大环境、家庭、经济等等）。但我仍然更乐意被大家称为程序员或者“老”程序员，就像在我博客的自我介绍中，总是把全栈工程师放在那些“头衔”的第一位，并且，我还在利用业余时间做自己喜欢的开源或个人项目。当再次问自己 <code>“为什么要编程”</code> 时，这一次，我获得了与以往不一样的感悟：或许我们编程是为了能够留下一些痕迹吧。</p>
<p>&emsp;&emsp;公司里最近都在为一个老系统的升级问题发愁。这个系统已经运行了将近20年时间了，为了升级系统，大家不得不深入到这个系统的梃采中，去读底层代码。我们读到了一位已经退休的美国同事 Bill 所实现的数据库连接池代码。在那个时候 Java 刚开始流行，还没有像 Spring 这样的框架，或是如 Hibernate、MyBatis 这样标准的持久层实现，这个系统中所有的数据库连接池及核心持久层代码都是由这位美国同事写的，这些代码让整个系统稳定运行了将近20年，大家都不禁为他高超的技术水平发出由衷的赞叹。</p>
<p>我还认识一位从事证券交易软件研发的公司 CTO，看年纪他应该已经接近50岁了，但他仍然在亲自编写那些证券交易的核心代码。当我问他为什么到了这个年龄和职位，还要坚持写代码时，他告诉我，当他看到自己所写的代码每天在支撑着千亿级的证券交易时，他感到非常兴奋和自豪，并不断希望能够通过自己的努力将它做得更好。</p>
<p>我的这个美国同事不会听到大家为他十几年前所写代码发出的赞叹，股民们也不会知道这位 CTO 所写的代码正在支撑着他们的日常交易。那些优秀的代码是他们留下的痕迹，虽然我们不能确定这些痕迹能够保留多久，或许几年，或许更短，但它们都曾经在我们的日常生活中产生了重要的价值，并且新的未来也将构建在这些痕迹的基础之上，我想这可能才是编程的意义所在吧。</p>
<p>我似乎又一次理解了编程的意义，但我明白未来的某一天，我一定还会问自己同样的问题 —— 为什么要编程，希望到那个时候自己还能是那个热爱编程，有着一颗匠心的“技匠”……</p>
<hr>
<blockquote>
<p>读《程序员的自我修养》（陈逸鹤）有感，感触至深之处，摘录于此，若有不当之处，联系博主即可删文。</p>
</blockquote>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>算法分析与设计：动态规划（空间复杂度优化）</title>
    <url>/2021/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BC%98%E5%8C%96%EF%BC%89/</url>
    <content><![CDATA[<hr>
<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>由于高数巨养的喵星人太傲娇了，要天天吃新鲜猫粮而且还经常欺负高数巨，所以高数巨决定买几条哈士奇尝尝鲜。这天高数巨来到了二手狗市场买哈士奇，高数巨看完了所有的哈士奇，记下了每条哈士奇的价格，并根据对它们的好感程度给它们每只都赋予了一个萌值。高数现在手里有 <code>X</code> 元，她想通过购买若干条哈士奇来获得尽可能多的萌值。现在给定高数巨手里的钱 <code>X</code> 以及 <code>N</code> 条哈士奇的价格和萌值，求高数巨最多可获得多少萌值。</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>多组输入。对于每组输入，第一行有两个整数<code>N,X(1 \leq N \leq 100，1 \leq X\leq1000)</code>，分别表示哈士奇的数量和高数巨的钱数。接下来的<code>N</code>行每行有两个整数<code>P_i</code>，<code>M_i (1 \leq Pi,Mi \leq 100)</code>，分别表示第 <code>i</code> 条哈士奇的价格和萌值。</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>对于每组数据，输出一个整数，表示高数巨最多可以获得的萌值，每组输出占一行。</p>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>2 100 50 20 60 40 3 100 20 55 20 35 90 95 1 10 20 50</p>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>40 95 0</p>
<h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, v;</span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">1001</span>], p[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;v)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// w 重量  | p 价值</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w[i], &amp;p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重新初始化最优值结果数组</span></span><br><span class="line">        <span class="keyword">int</span> res[<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 存储的物品个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = v; k &gt;= w[i]; k--) &#123; <span class="comment">// 从所需要的重量到当前重量</span></span><br><span class="line">                res[k] = <span class="built_in">max</span>(res[k], res[k - w[i]] + p[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="最少硬币问题"><a href="#最少硬币问题" class="headerlink" title="最少硬币问题"></a>最少硬币问题</h2><h4 id="Problem-Description-1"><a href="#Problem-Description-1" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>设有 <code>n</code> 种不同面值的硬币，各硬币的面值存于数组 <code>T[1:n]</code> 中。现要用这些面值的硬币来找钱。可以使用的各种面值的硬币个数存于数组 <code>Coins[1:n]</code> 中。 对任意钱数 <code>0 \leq m \leq 20001</code>，设计一个用最少硬币找钱 <code>m</code> 的方法。 对于给定的 <code>1 \leq n \leq 10</code>，硬币面值数组 <code>T</code> 和可以使用的各种面值的硬币个数数组 <code>Coins</code> ，以及钱数 <code>m</code> ，<code>0 \leq m \leq 20001</code> ，计算找钱 <code>m</code> 的最少硬币数。</p>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>输入数据第一行中只有1个整数给出 <code>n</code> 的值,第2行起每行2个数，分别是 <code>T[j]</code> 和 <code>Coins[j]</code> 。最后1行是要找的钱数 <code>m</code>。</p>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>输出数据只有一个整数，表示计算出的最少硬币数。问题无解时输出 -1。</p>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>3 1 3 2 3 5 3 18</p>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>5</p>
<h4 id="实例代码-1"><a href="#实例代码-1" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m, n, T[<span class="number">20001</span>], Coin[<span class="number">20001</span>];</span><br><span class="line">    <span class="keyword">int</span> res[<span class="number">20001</span>];</span><br><span class="line">    <span class="built_in">memset</span>(res, INF, <span class="built_in"><span class="keyword">sizeof</span></span>(res));</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; T[i] &gt;&gt; Coin[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="comment">// res[目标面额] = 最小需求个数</span></span><br><span class="line">    res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历面额值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="comment">// 遍历每种面额内有几张</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= Coin[i]; j++)</span><br><span class="line">            <span class="comment">// 遍历目标金额，选择当前这枚硬币是要还是不要</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = m; k &gt;= T[i]; k--)</span><br><span class="line">                <span class="comment">// 将所有硬币依次拆分成单个，</span></span><br><span class="line">                <span class="comment">// res[目标面额] = min(res[目标面额-当前面额]+1，res[目标面额])，</span></span><br><span class="line">                <span class="comment">// 前一个是将该面额放入该组合中，后一个是不采用当前面额，选取数值最小的。</span></span><br><span class="line">                res[k] = <span class="built_in">min</span>(res[k - T[i]] + <span class="number">1</span>, res[k]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; (res[m] &lt; INF ? res[m] : <span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与“背包问题”的对比与分析"><a href="#与“背包问题”的对比与分析" class="headerlink" title="与“背包问题”的对比与分析"></a>与“背包问题”的对比与分析</h4><ol>
<li>“背包”中给出了“损失”与“收益”，但其都是对于单个物品，求最大收益；“硬币”中给出的是“收益”、“个数”与“最终收益”，求最小组合。</li>
<li>依旧采用一维数组 <code>res[目标面额]=最小需求个数</code> 来存储最终结果。</li>
<li>将所有硬币依次拆分成单个，<code>res[目标面额] = min(res[目标面额-当前面额]+1，res[目标面额])</code>，前一个是将该面额放入该组合中，后一个是不采用当前面额，选取数值最小的。</li>
</ol>
<hr>
<h2 id="空间复杂度优化-（以背包问题为例）"><a href="#空间复杂度优化-（以背包问题为例）" class="headerlink" title="空间复杂度优化 （以背包问题为例）"></a>空间复杂度优化 （以背包问题为例）</h2><p>有很多人采用二维数组 <code>res[i][j]</code> 静态地更新来解决背包问题，使用二维数组更加直观，但是空间复杂度较高。</p>
<p>如果采用一维数组动态更新看起来比较难理解，但使用范围比较广。(比如，最少硬币问题中，三重循环，也可以采用一维数组来解决，但如果使用二维的话，对应地应该上升到三维)。</p>
<h4 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h4><p><strong>“k:v-&gt;w[i]，依次递减”</strong>，这可能比较难以理解，在我们默认从小到大，而这里，必须从大到小，否则就是错误。</p>
<h4 id="难点解答："><a href="#难点解答：" class="headerlink" title="难点解答："></a>难点解答：</h4><p>产生上述问题，本质就是对<code>res[]</code>数组在某一时间其存储的值的不理解。</p>
<p>对于每一次更新开始，<code>res[]</code>存储着的是“放入这个物品之前的最优解”，而我们比较的是 <code>res[k]</code> 与 <code>res[k - w[i]] + p[i]</code> (背包问题)，其中 <code>res[k-w[i]]</code>是之前的最优解。</p>
<p>因为一定存在 <code>k &gt; k-w[i]</code>，如果从小到大，则一定会先与 <code>res[k]</code> 更新 <code>res[k-w[i]]</code>，这就会导致比较错误。此时 <code>res[k-w[i]]</code> 已经变为“将该商品放入之后的最优价值”，在这价值基础之上，在加 <code>p[i]</code> ，其价值大概率会比 <code>res[k]</code> 高，而更新，这样，越来越大，完全背离了我们实际的意思。 因此，必须从后往前，因为前面存储着的是过去的值（不放第 <code>i</code> 件物品时的值）进行比较。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>算法分析与设计</category>
      </categories>
      <tags>
        <tag>背包问题</tag>
        <tag>最小硬币问题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题：最大连续子序列和</title>
    <url>/2022/%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9A%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>求取数组中最大连续子序列和，例如给定数组为$A={1， 3， -2， 4， -5}$， 则最大连续子序列和为 6，即 $1+3+(-2)+ 4 = 6$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><strong>最大连续子序列和：当前元素前面为正数，带上前面的序列；前面为负数或0，自己为起点。</strong></p>
<p>因为最大连续子序列和只可能是以位置 $0 \sim n-1$ 中某个位置结尾。当遍历到第$i$个元素时，判断在它前面的连续子序列和是否大于0，如果大于0，则以位置$i$结尾的最大连续子序列和为元素$i$和前面的连续子序列和相加；否则，则以位置$i$结尾的最大连续子序列和为元素$i$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSequence</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum, maxHere;</span><br><span class="line">    maxSum = maxHere = a[<span class="number">0</span>];   <span class="comment">// 初始化最大和为a[0]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxHere &lt;= <span class="number">0</span>)</span><br><span class="line">            maxHere = a[i];  <span class="comment">// 如果前面位置最大连续子序列和小于等于0，则以当前位置i结尾的最大连续子序列和为a[i]</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            maxHere += a[i]; <span class="comment">// 如果前面位置最大连续子序列和大于0，则以当前位置i结尾的最大连续子序列和为它们两者之和</span></span><br><span class="line">        <span class="keyword">if</span> (maxHere &gt; maxSum) &#123;</span><br><span class="line">            maxSum = maxHere;  <span class="comment">// 更新最大连续子序列和</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度</strong>：$O(n)$ 。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>BUG日志：宝塔CentOS安装Docker失败（2022.9.13）</title>
    <url>/2022/BUG%E6%97%A5%E5%BF%97%EF%BC%9A%E5%AE%9D%E5%A1%94CentOS%E5%AE%89%E8%A3%85Docker%E5%A4%B1%E8%B4%A5%EF%BC%882022.9.13%EF%BC%89/</url>
    <content><![CDATA[<h1 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;class/panelPlugin.py&quot;</span>, line 2788, <span class="keyword">in</span> a</span><br><span class="line">    <span class="built_in">return</span> p.exec_fun(get)</span><br><span class="line">  File <span class="string">&quot;class/pluginAuth.py&quot;</span>, line 67, <span class="keyword">in</span> exec_fun</span><br><span class="line">    raise public.PanelError(res[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">public.PanelError: 面板运行时发生错误: Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/www/server/panel/plugin/docker/docker_main.py&quot;</span>, line 57, <span class="keyword">in</span> GetConList</span><br><span class="line">    <span class="keyword">for</span> con <span class="keyword">in</span> self.__docker.containers.list(all=True):</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> object has no attribute <span class="string">&#x27;containers&#x27;</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><h2 id="1-卸载已经安装的-Docker"><a href="#1-卸载已经安装的-Docker" class="headerlink" title="1. 卸载已经安装的 Docker"></a>1. 卸载已经安装的 Docker</h2><p>如果已经安装了未运行成功的 Docker，错误如下图所示，那么请将这个 Docker 卸载。</p>
<p><img src="/images/bug_docker_1.png" alt="错误页面"></p>
<h2 id="2-在-etc-docker-路径下创建-daemon-配置文件"><a href="#2-在-etc-docker-路径下创建-daemon-配置文件" class="headerlink" title="2. 在 /etc/docker 路径下创建 daemon 配置文件"></a>2. 在 <code>/etc/docker</code> 路径下创建 daemon 配置文件</h2><p><img src="/images/bug_docker_2.png" alt="daemon 配置文件"></p>
<p>在 <code>daemon.json</code> 文件中提前配置好 Docker 的镜像源，即将下面这段代码粘贴到 <code>daemon.json</code> 文件中。 <code>daemon.conf</code> 文件此时保持空即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-重新安装-Docker"><a href="#3-重新安装-Docker" class="headerlink" title="3. 重新安装 Docker"></a>3. 重新安装 Docker</h2><p>我安装的是宝塔软件商店中的 3.9.1 的版本。</p>
<hr>
<h1 id="BUG原因分析"><a href="#BUG原因分析" class="headerlink" title="BUG原因分析"></a>BUG原因分析</h1><p>可能是因为宝塔提供的镜像源和CentOS的版本不匹配，因为CentOS基于Python2.7运行的，Docker 3.9.1 的运行环境好像是Python3，所以要更新一下镜像源。</p>
]]></content>
      <categories>
        <category>BUG日志</category>
      </categories>
      <tags>
        <tag>BUG</tag>
        <tag>CentOS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网应用开发实践：MySQL数据库部署与操作</title>
    <url>/2022/%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%EF%BC%9AMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><p>本次的实验环境是<code>CentOS 7.9</code> 已经安装了宝塔面板，并安装了<code>Docker管理器3.9.1</code>。</p>
<hr>
<h1 id="MySQL的安装与部署"><a href="#MySQL的安装与部署" class="headerlink" title="MySQL的安装与部署"></a>MySQL的安装与部署</h1><h2 id="1-在Docker中安装MySQL"><a href="#1-在Docker中安装MySQL" class="headerlink" title="1. 在Docker中安装MySQL"></a>1. 在Docker中安装MySQL</h2><p><strong>【将Docker中MySQL数据库挂载到服务器】</strong><br>将Docker中的数据以及配置文件映射到服务器的文件系统上，这样当删除了Docker容器后，之前的数据记录依然存在。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=always --privileged=true -d \</span><br><span class="line">-v /dockerImageFile/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /dockerImageFile/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /dockerImageFile/mysql/my.cnf:/etc/mysql/my.cnf </span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--name mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-v</code>：文件挂载（<code>宿主机文件路径</code>:<code>Docker容器文件路径</code>）；</li>
<li><code>-p</code>：端口映射（<code>对外暴露端口</code>:<code>Docker容器内部端口</code>）；</li>
<li><code>--name</code>：容器名称；</li>
<li> <code>MYSQL_ROOT_PASSWORD=123456</code>：设置MySQL数据库的初始root密码为<code>123456</code>；</li>
<li><code>mysql:5.7</code>：指定MySQL版本为5.7。</li>
</ul>
<p><strong>【若不需要挂载的话可以正常运行下面的命令】</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>


<p><strong>【注意】</strong>：上述指令只适用于Linux、Windows系统等x86架构芯片的机器，若为M1芯片，需要使用如下命令安装较新的MySQL版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server</span><br></pre></td></tr></table></figure>

<h3 id="可能会遇到的错误"><a href="#可能会遇到的错误" class="headerlink" title="可能会遇到的错误"></a>可能会遇到的错误</h3><h4 id="※-数据库管理工具连接错误"><a href="#※-数据库管理工具连接错误" class="headerlink" title="※ 数据库管理工具连接错误"></a>※ 数据库管理工具连接错误</h4><p><strong>错误提示</strong>：<code>Host &#39;172.17.0.1&#39; is not allowed to connect to this MySQL server</code></p>
<p>说明所连接的用户帐号没有远程连接的权限，只能在本机（localhost）登录，需更改 MySQL 数据库里的 user 表里的 host 项。</p>
<ul>
<li>进入容器：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">exec</span> <span class="operator">-</span>it mysql <span class="operator">/</span>bin<span class="operator">/</span>bash</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>登录MySQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br></pre></td></tr></table></figure></li>
<li><p>修改权限表格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> &quot;root&quot;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h4 id="※-无修改权限"><a href="#※-无修改权限" class="headerlink" title="※ 无修改权限"></a>※ 无修改权限</h4></li>
</ul>
<p><strong>错误提示</strong>：<code>Access denied for user &#39;dorm&#39;@&#39;%to database &#39;xxx&#39;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;dorm&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="2-在Docker中安装phpMyAdmin"><a href="#2-在Docker中安装phpMyAdmin" class="headerlink" title="2. 在Docker中安装phpMyAdmin"></a>2. 在Docker中安装phpMyAdmin</h2><p>phpMyAdmin 是一种 MySQL图形化 管理工具，该工具是基于 Web 跨平台的管理程序，并且支持简体中文。在宿主机的命令行运行下面的代码即可安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name phpmyadmin -p 8080:80 --link mysql:db -d phpmyadmin/phpmyadmin:latest</span><br></pre></td></tr></table></figure>
<ul>
<li><code>phpmyadmin</code>：容器名称；</li>
<li><code>8080:80</code>：开放端口 8080 来映射宿主机的 80 端口；</li>
<li><code>mysql</code>：刚才设置的MySQL的容器名称，如果刚才修改容器名称的话，一定记得要在这里修改。</li>
</ul>
<p>安装完成后，通过 <code>公网IP:8080</code> 即可访问如下页面，初始账号为 root，密码为刚才设置的<code>MYSQL_ROOT_PASSWORD=</code>后面的内容（<code>123456</code>）</p>
<p><img src="https://img-blog.csdnimg.cn/b7053c795ab3491b8eee4921f262c3e1.png" alt="PHPMyAdmin"></p>
<h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><h4 id="※-无法访问phpMyAdmin"><a href="#※-无法访问phpMyAdmin" class="headerlink" title="※ 无法访问phpMyAdmin"></a>※ 无法访问phpMyAdmin</h4><p>这种情况大多数是因为防火墙（或服务器的安全组规则）导致的。因为刚才自定义的 <code>8080</code> 端口在服务器中是默认不开放的，所以要配置服务器的安全组，将其开放。</p>
<p><img src="https://img-blog.csdnimg.cn/d3d51fad39944b11aa8c943a3dfe2bec.png" alt="腾讯云开放安全组"></p>
<h2 id="3-创建账户与数据库"><a href="#3-创建账户与数据库" class="headerlink" title="3. 创建账户与数据库"></a>3. 创建账户与数据库</h2><p> 新建一个项目账户（dorm），如下图所示。<br> <img src="https://img-blog.csdnimg.cn/14152f1d046542989532d639349df20f.png" alt="新增项目用户"></p>
<p><strong>【注意】：在项目中尽量不要使用root用户管理项目，而是单独创建以该项目名称为命名的数据库账户，并建立同名的数据库进行管理。</strong></p>
<h2 id="4-本地MySQL的安装与操作"><a href="#4-本地MySQL的安装与操作" class="headerlink" title="4. 本地MySQL的安装与操作"></a>4. 本地MySQL的安装与操作</h2><p>本人使用的是M1的Mac环境，因此对应安装了M1版本的Docker和MySQL，具体步骤和①两步类似，所以这里就不再赘述。<br>本地是数据库管理软件我使用的的是免费开源的数据库管理软件“Sequel Ace”，它具有数据库管理软件的基本功能，在AppStore中就可以搜索到，而且是完全免费的。<br><img src="https://img-blog.csdnimg.cn/52f48f403f2541829f30f9cd724df2c6.png" alt="Sequel Ace"></p>
<p><img src="https://img-blog.csdnimg.cn/a71c82eae5e34b7c81e4903bee355d94.png" alt="设计数据库"></p>
<hr>
<h1 id="SpringBoot-连接-MySQL"><a href="#SpringBoot-连接-MySQL" class="headerlink" title="SpringBoot 连接 MySQL"></a>SpringBoot 连接 MySQL</h1><h2 id="1-porm-xml-文件"><a href="#1-porm-xml-文件" class="headerlink" title="1. porm.xml 文件"></a>1. porm.xml 文件</h2><p>在 porm.xml 文件中的<code>&lt;dependencies&gt;</code>中添加 JDBC 的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更新 Maven 依赖。</p>
<h2 id="2-application-yml-文件"><a href="#2-application-yml-文件" class="headerlink" title="2. application.yml 文件"></a>2. application.yml 文件</h2><p>修改SpringBoot配置文件，application.yml 文件，增加数据库相关信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:  </span><br><span class="line">  port: <span class="number">8090</span></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">	# url: jdbc:mysql:<span class="comment">//127.0.0.1:3306/DORM  # 本地测试环境</span></span><br><span class="line">    url: jdbc:mysql:<span class="comment">//42.194.xxx.xx:3306/dorm	# 服务器环境</span></span><br><span class="line">    username: dorm</span><br><span class="line">    password: dorm</span><br><span class="line">    driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span>: <span class="title">com</span>.<span class="title">mysql</span>.<span class="title">cj</span>.<span class="title">jdbc</span>.<span class="title">Driver</span></span></span><br></pre></td></tr></table></figure>



<h2 id="3-Java类文件"><a href="#3-Java类文件" class="headerlink" title="3. Java类文件"></a>3. Java类文件</h2><p>添加Java类文件，DormInfo.java。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songxj.dormitory_system.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DormInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/dormInfo&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; getDormInfo() &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from dorm&quot;</span>; <span class="comment">// SQL查询语句</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForList(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-本地测试"><a href="#4-本地测试" class="headerlink" title="4. 本地测试"></a>4. 本地测试</h2><p>本地测试结果如下：</p>
<p><img src="https://img-blog.csdnimg.cn/83e83c0d7bc7418d9339125fb953b8f0.png" alt="本地测试"></p>
<h2 id="5-打包-jar-包"><a href="#5-打包-jar-包" class="headerlink" title="5. 打包 jar 包"></a>5. 打包 jar 包</h2><p><img src="https://img-blog.csdnimg.cn/35232358d53e4284a21aee68cca1e37a.png" alt="打jar包"></p>
<h2 id="6-本地开发环境连接服务器Docker"><a href="#6-本地开发环境连接服务器Docker" class="headerlink" title="6. 本地开发环境连接服务器Docker"></a>6. 本地开发环境连接服务器Docker</h2><p>连接Docker宿主机，修改Docker服务文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi  /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>将原来的<code>ExecStart</code>前面加上<code>#</code>号注释掉，然后在下面追加一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd    -H tcp://0.0.0.0:2375    -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
<p>重新加载配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>重启Docker服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

<p>开放宿主机安全组中的 2375 端口<br><img src="https://img-blog.csdnimg.cn/5dfe7ed57de24940b246c6ee476a8f68.png" alt="开放宿主机安全组中的2375端口"></p>
<p>在IDEA中安装Docker插件。<br><img src="https://img-blog.csdnimg.cn/8642aee2e39341cd97b613ada050be4b.png" alt="Docker插件"></p>
<p>在Docker插件中连接宿主机服务器<br><img src="https://img-blog.csdnimg.cn/1fdc292a3b2d45cbb0e89c9fc641a926.png" alt="配置Docker"></p>
<h2 id="7-Docker-在本地创建（build）并运行（run）镜像"><a href="#7-Docker-在本地创建（build）并运行（run）镜像" class="headerlink" title="7. Docker 在本地创建（build）并运行（run）镜像"></a>7. Docker 在本地创建（build）并运行（run）镜像</h2><ul>
<li><p>创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t dorm_sys:1.0.0 . </span><br></pre></td></tr></table></figure></li>
<li><p>运行镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10110:8090 --name dorm_sys dorm_sys:1.0.0</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>【M1芯片打包的jar包在Linux环境无法运行】</strong></p>
<ul>
<li>M1芯片（arm64）构建Linux（amd64）可运行的镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build --platform linux/amd64 -t dorm_sys:1.0.0 . </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-上传本地镜像到阿里云"><a href="#8-上传本地镜像到阿里云" class="headerlink" title="8. 上传本地镜像到阿里云"></a>8. 上传本地镜像到阿里云</h2><p>首先在阿里云免费申请容器镜像服务（<a href="https://cr.console.aliyun.com/repository/">https://cr.console.aliyun.com/repository/</a>）</p>
<ul>
<li><p>登录阿里云容器镜像服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login --username=songxj01 registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure></li>
<li><p>上传镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag dorm_sys:1.0.0 registry.cn-hangzhou.aliyuncs.com/songxj01/dorm_sys:1.0.0</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/songxj01/dorm_sys:1.0.0</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="9-在服务器拉取镜像并运行"><a href="#9-在服务器拉取镜像并运行" class="headerlink" title="9. 在服务器拉取镜像并运行"></a>9. 在服务器拉取镜像并运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/songxj01/dorm_sys:1.0.0</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10110:8090 --name dorm_sys registry.cn-hangzhou.aliyuncs.com/songxj01/dorm_sys:1.0.0</span><br></pre></td></tr></table></figure>

<p>在线测试：<br><img src="https://img-blog.csdnimg.cn/f654f14147ae41d1983fa47a2003bf89.png" alt="在线测试"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>互联网应用开发实践</category>
      </categories>
      <tags>
        <tag>互联网应用开发实践</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题：最长回文子串</title>
    <url>/2022/%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9A%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>对于一个子串而言，如果它是回文串，并且长度大于 2，那么将它首尾的两个字母去除之后，它仍然是个回文串。例如对于字符串 “ababa”，如果我们已经知道 “bab” 是回文串，那么 “ababa” 一定是回文串，这是因为它的首尾两个字母都是 “a”。</p>
<p><strong>注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// dp[i][j] 表示 s[i..j] 是否是回文串</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="comment">// 初始化：所有长度为 1 的子串都是回文串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.toCharArray();</span><br><span class="line">        <span class="comment">// 递推开始</span></span><br><span class="line">        <span class="comment">// 先枚举子串长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= len; L++) &#123;</span><br><span class="line">            <span class="comment">// 枚举左边界，左边界的上限设置可以宽松一些</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="comment">// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></span><br><span class="line">                <span class="keyword">int</span> j = L + i - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 如果右边界越界，就可以退出当前循环</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= len) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (charArray[i] != charArray[j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                        dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = j - i + <span class="number">1</span>;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(begin, begin + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度</strong>：$O(n^2)$ 。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法题</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题：LeetCode (1094) 拼车【一题搞懂差分数组】</title>
    <url>/2022/%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%9ALeetCode%20(1094)%20%E6%8B%BC%E8%BD%A6%E3%80%90%E4%B8%80%E9%A2%98%E6%90%9E%E6%87%82%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E3%80%91/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>车上最初有 <code>capacity</code> 个空座位，车只能向一个方向行驶，给定整数 <code>capacity</code> 和一个数组 <code>trips</code> ,  <code>trip[i] = [numPassengersi, fromi, toi]</code> 表示第 <code>i</code> 次旅行有 <code>numPassengersi</code> 乘客，接他们和放他们的位置分别是 <code>fromi</code> 和 <code>toi</code> 。这些位置是从汽车的初始位置向东的公里数。</p>
<p>当且仅当你可以在所有给定的行程中接送所有乘客时，返回 <code>true</code>，否则请返回 <code>false</code>。                                                                                                     </p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/car-pooling">https://leetcode.cn/problems/car-pooling</a></p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>示例 1：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：trips = [[2,1,5],[3,3,7]], capacity = 4</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>

<ul>
<li>示例 2：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：trips = [[2,1,5],[3,3,7]], capacity = 5</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>


<p><br /> <br /> </p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><strong>差分数组</strong>：差分数组主要的适用场景是对原始数组进行频繁的区间增减操作，这个时候适用差分数组能够快速的完成，同时能够快速获得更新后的数组各个位置的值。</p>
<p>以<code>trips = [[2,1,5],[3,3,7]], capacity = 4</code>为例，数组变化如下：<br><img src="https://img-blog.csdnimg.cn/957eee57452244079f9c3c4e59decfe7.png" alt="乘客情况"></p>
<p>使用差分数组修改上图所示的数组，结果如下：<br><img src="https://img-blog.csdnimg.cn/cb8fac0528974384adb983ca78083d3c.png" alt="修改为差分数组"></p>
<p><br /> <br /> </p>
<h1 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeetCode_1094_carPooling</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">carPooling</span><span class="params">(<span class="keyword">int</span>[][] trips, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] t : trips) &#123;</span><br><span class="line">            <span class="keyword">int</span> passengers = t[<span class="number">0</span>], from = t[<span class="number">1</span>], to = t[<span class="number">2</span>];</span><br><span class="line">            diff[from] += passengers;</span><br><span class="line">            diff[to] -= passengers;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;    <span class="comment">// 差分求和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : diff) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; capacity) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术笔记</category>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法题</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网应用开发实践：需求分析与数据库设计</title>
    <url>/2022/%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%EF%BC%9A%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>在本文中将分析一个用于新生开学分配寝室的“<strong>宿舍秒杀</strong>”系统。从用户故事开始<strong>探索需求</strong>，进而分析得到系统的主要功能和非功能性需求。最后，根据需求分析设计数据库，数据库的设计原则是尽可能的方便之后的需求拓展和修改。</p>
<hr>
<p><br/><br/></p>
<h1 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h1><p>用户故事一般是产品经理初次描述给自己和开发人员看的，然后产品负责人要依据用户故事设计原型，原型在客户那里通过后，然后再在用户故事里面添加附件。用户故事不会一开始就很清晰，甚至可能不会有特专业术语。</p>
<h2 id="学生"><a href="#学生" class="headerlink" title="学生"></a>学生</h2><ul>
<li>作为<code>学生</code>，我想要<code>在系统里登录，并获取验证码</code>，以便于<code>登录到自己的账号中进行宿舍选取</code>。</li>
<li>作为<code>学生</code>，我想要<code>查询剩余宿舍的信息</code>，以便于<code>及时选择或更换寝室志愿</code>。</li>
<li>作为<code>学生</code>，我想要<code>查询宿舍的基本信息（楼号、寝室人数、是否为上下铺、寝室朝向）</code>，以便于<code>选择自己志愿的寝室</code>。</li>
<li>作为<code>学生</code>，我想要<code>核对我的个人信息</code>，以便于<code>在分寝室的时候不会出现错误</code>。</li>
<li>作为<code>学生</code>，我想要<code>可以组队抢寝室</code>，以便于<code>在分寝室的时候不会出现错误</code>。</li>
<li>作为<code>学生</code>，我想要<code>可以创建组队</code>或<code>加入队伍</code>，以便于<code>进行组队抢宿舍</code>。</li>
<li>作为<code>学生</code>，我想要<code>在系统里预先选择要抢的宿舍，到点提交</code>，以便于<code>在第一时间抢宿舍</code>。</li>
<li>作为<code>学生</code>，我想要<code>查看寝室的选取结果（包括分到的寝室号，室友的相关信息）</code>，以便于<code>及时联系到室友</code>。</li>
</ul>
<h2 id="寝管"><a href="#寝管" class="headerlink" title="寝管"></a>寝管</h2><ul>
<li>作为<code>寝管</code>，我想要<code>修改每个寝室的床位信息</code>，以便于<code>管理寝室信息</code>。</li>
<li>作为<code>寝管</code>，我想要<code>按照寝室顺序导出名单</code>，以便于<code>在报到时让领钥匙的同学签字</code>。</li>
<li>作为<code>寝管</code>，我想要<code>查询并修改床位的可用状态</code>，以便于<code>对损坏的床位进行申请报修</code>。</li>
</ul>
<h2 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h2><ul>
<li>作为<code>管理员</code>，我想要<code>学生核对他们的个人信息</code>，以便于<code>在分寝室的时候不会出现错误</code>。</li>
<li>作为<code>管理员</code>，我想要<code>对学生设置标签</code>，以便于<code>后期规定按照某一标签（如班级、专业）进行分寝室</code>。</li>
<li>作为<code>管理员</code>，我想要<code>系统支持2000人左右的同时访问</code>，以便于<code>满足学生可以在一个时间点同时抢寝室</code>。</li>
<li>作为<code>管理员</code>，我想要<code>防止有同学使用脚本去抢寝室</code>，以便于<code>保证系统的安全性</code>。</li>
</ul>
<p><br/><br/></p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li>学生核对个人基本信息</li>
<li>查询宿舍基本信息（如，宿舍人数等）</li>
<li>查询宿舍空床位信息</li>
<li>学生可以被设置标签（如班级）</li>
<li>根据标签设置可选房间列表（如列表为空，则可选所有满足条件的宿舍）</li>
<li>学生可以组队选宿舍（1-4人）</li>
<li>查看订单处理结果</li>
<li>管理员可以管理宿舍信息</li>
<li>管理员可以编辑宿舍床位的状态（如床位不可用）</li>
<li>管理员可以导出相关的数据</li>
</ul>
<h2 id="非功能性需求"><a href="#非功能性需求" class="headerlink" title="非功能性需求"></a>非功能性需求</h2><ul>
<li>支持2000人并发</li>
<li>防止脚本</li>
</ul>
<p><br/><br/></p>
<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>考虑到后期需求可能会发生变动，因此在数据库设计的时候最大程度降低了表与表之间的关联程度。数据库中有两个核心主体——<code>bed</code>（床位信息）、<code>student</code>（学生信息）。</p>
<ul>
<li>与<strong>床位信息</strong>相关的表有：<code>dorm</code>（宿舍信息）、<code>house</code>（宿舍楼信息）、<code>bed_type</code>（床铺类型信息）。</li>
<li>与<strong>学生信息</strong>相关的表有：<code>class</code>（班级信息）、<code>major</code>（专业信息）、<code>stu_contact_info</code>（学生联络信息表）。其中年级信息作为一个属性考虑在班级信息内。</li>
</ul>
<p>对于<strong>学生</strong>和<strong>床位</strong>的关系，单独建立了一个关联表<code>rel_bed_stu</code>。该表使用“学号+时间戳”的方式作为主键，记录学生床位的分配信息。除此之外，还设计了<code>config</code>表储存系统相关配置信息，<code>admin</code>表储存管理员相关信息。</p>
<h2 id="数据库表结构"><a href="#数据库表结构" class="headerlink" title="数据库表结构"></a>数据库表结构</h2><h3 id="床位信息表：bed"><a href="#床位信息表：bed" class="headerlink" title="床位信息表：bed"></a>床位信息表：bed</h3><p><img src="https://img-blog.csdnimg.cn/c29903f5c25444469d80cadcfd796c0a.png" alt="床位信息表"></p>
<h3 id="寝室信息表：dorm"><a href="#寝室信息表：dorm" class="headerlink" title="寝室信息表：dorm"></a>寝室信息表：dorm</h3><p><img src="https://img-blog.csdnimg.cn/7b2e70dba99349d2beeed96af7cde30c.png" alt="寝室信息表"></p>
<h3 id="楼号信息表：house"><a href="#楼号信息表：house" class="headerlink" title="楼号信息表：house"></a>楼号信息表：house</h3><p><img src="https://img-blog.csdnimg.cn/573b2af5e7a3447ca44eeb9d2e4dc8c3.png" alt="楼号信息表"></p>
<h3 id="床位类型表：bed-type"><a href="#床位类型表：bed-type" class="headerlink" title="床位类型表：bed_type"></a>床位类型表：bed_type</h3><p><img src="https://img-blog.csdnimg.cn/64e505da4dc14fceb9455ebf97c8f4ac.png" alt="床位类型表"></p>
<h3 id="学生信息表：student"><a href="#学生信息表：student" class="headerlink" title="学生信息表：student"></a>学生信息表：student</h3><p><img src="https://img-blog.csdnimg.cn/330c4e35692842ce97534642f80c8db9.png" alt="学生信息表"></p>
<h3 id="学生联系方式表：stu-contact-info"><a href="#学生联系方式表：stu-contact-info" class="headerlink" title="学生联系方式表：stu_contact_info"></a>学生联系方式表：stu_contact_info</h3><p><img src="https://img-blog.csdnimg.cn/a1e9190e810543e8a33a4df5729b4883.png" alt="学生联系方式表"></p>
<h3 id="班级信息表：class"><a href="#班级信息表：class" class="headerlink" title="班级信息表：class"></a>班级信息表：class</h3><p><img src="https://img-blog.csdnimg.cn/06ecbb5f8f6a450d867604c74a491fae.png" alt="班级信息表"></p>
<h3 id="专业信息表：major"><a href="#专业信息表：major" class="headerlink" title="专业信息表：major"></a>专业信息表：major</h3><p><img src="https://img-blog.csdnimg.cn/194a4b42121c46d78b4b694d9257ed93.png" alt="专业信息表"></p>
<h3 id="学生-床位关系表：rel-bed-stu"><a href="#学生-床位关系表：rel-bed-stu" class="headerlink" title="学生-床位关系表：rel_bed_stu"></a>学生-床位关系表：rel_bed_stu</h3><p><img src="https://img-blog.csdnimg.cn/7d78655bce8e469c8f67bde7b16c8513.png" alt="学生床位关系表"></p>
<h3 id="订单表：order"><a href="#订单表：order" class="headerlink" title="订单表：order"></a>订单表：order</h3><p><img src="https://img-blog.csdnimg.cn/77f63e67b31f4eb7aec4cadc1293b815.png" alt="订单表"></p>
<h3 id="管理员信息表：admin"><a href="#管理员信息表：admin" class="headerlink" title="管理员信息表：admin"></a>管理员信息表：admin</h3><p><img src="https://img-blog.csdnimg.cn/e3ac3b94b8454fb0bdd0ca037e454c7b.png" alt="管理员信息表"></p>
<h3 id="配置表：config"><a href="#配置表：config" class="headerlink" title="配置表：config"></a>配置表：config</h3><p><img src="https://img-blog.csdnimg.cn/18e8bd47c6d14275b797378634ba502f.png" alt="配置表"></p>
<h2 id="数据库模型图"><a href="#数据库模型图" class="headerlink" title="数据库模型图"></a>数据库模型图</h2><p><img src="https://img-blog.csdnimg.cn/6701e51bc3704eabb8c8f3c80c3f262c.png" alt="数据库模型图"></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>互联网应用开发实践</category>
      </categories>
      <tags>
        <tag>互联网应用开发实践</tag>
        <tag>MySQL</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
